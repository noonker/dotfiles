;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:

#+title: Noonker's Config

Below is my configuration for Emacs. It is a literate config that can be installed by running =org-babel-tangle= or by using the hotkey =C-c C-v C-t=.
It is broken up into several sections:
 - Bootstrap - Code that instantiates the package manager
 - Behavior - Packages & tweaks to the behavior of emacs
 - Tools - Any packages which modify the behavior of emacs
 - Programming - Packages & tweaks to programming modes
 - Text - Any packages which are used primarily for writing of text (mostly org-mode)
 - Custom Functions - Any simple functions I've added to enrich my emacs life

* Bootstrap Straight.el

This section sets up [[https://github.com/radian-software/straight.el][straight.el]] with [[https://github.com/jwiegley/use-package][use-package]] to simplify setup of emacs. These packages allow me to control how the packages are installed, when they are loaded, and which configurations should be run with them.

#+begin_src emacs-lisp :tangle ~/.emacs
(defvar bootstrap-version)

(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Tell use-package to use straight to install applications
(straight-use-package 'use-package)

;; ...without specifying :straight
(setq straight-use-package-by-default 't)
#+end_src

* Behavior

** Platform Check
#+begin_src emacs-lisp :tangle ~/.emacs
(defun current-platform ()
  (interactive)
  (cond
   ((string-equal "Android\n" (shell-command-to-string "uname -o")) "android")
   ((string-equal system-type "windows-nt") "windows")
   ((string-equal system-type "darwin") "mac")
   ((string-equal system-type "gnu/linux") "linux"))
  )

(defcustom im-at-work t
  "im-at-work can be used to conditionally disable code which may not be suitable for work environments. ChatGPT, copilot, etc"
  :type '(boolean))
#+end_src


** One Liners

Anything in this section can be described in one sentence.

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package iedit) ;; Find and edit multiple occurances
(use-package ibuffer
  :config
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  ) ;; Advanced buffer list
(use-package magit)
(use-package transient)
(use-package emojify
  :config (global-emojify-mode)) ;; Emojis enabled
#+end_src

** Ace

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package avy
  :init (define-key global-map (kbd "M-p") 'avy-goto-char-2))
#+end_src

** Vertico

#+begin_src emacs-lisp :tangle ~/.emacs
;; Enable vertico

(use-package vertico
  :ensure t
  :bind (:map vertico-map
              :map minibuffer-local-map
              ("M-h" . backward-kill-word))
  :init
  (vertico-mode)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package consult)
(use-package embark-consult)
(use-package consult-ag)
(use-package consult-dir)
(use-package consult-org-roam)
(global-set-key (kbd "C-2") 'consult-buffer)
#+end_src

** Theme

Leuven Theme and Comic Mono

#+begin_src emacs-lisp :tangle ~/.emacs
(load-theme 'leuven t)

(set-face-attribute 'default nil :font "Comic Code" :height 100)
#+end_src

** Global Config

Random global behavior configs

#+begin_src emacs-lisp :tangle ~/.emacs
(setq display-line-numbers-type 'relative) ;; Relative line numbers
(global-display-line-numbers-mode) ;; Enable line numbers
(custom-set-variables '(linum-format 'dynamic)) ;; Automatically align line numbers
(global-hl-line-mode) ;; Highlight the current line
(tool-bar-mode -1) ;; Don't show the ugly emacs toolbar
(scroll-bar-mode -1) ;; No scroll bars
(menu-bar-mode -1) ;; No menu bar
(display-time-mode 1) ;; Show a clock in the modeline
(winner-mode 1) ;; Undo recent buffer configurations
(defalias 'yes-or-no-p 'y-or-n-p) ;; Shorten yes and no
(global-subword-mode 1) ;; Makes emacs understand CamelCase words as two words
(setq reb-re-syntax 'string) ;; Emacs re-mode uses string syntax
(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode 1) ;; Remember which files I've recently used
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))) ;;; Move backups
(setq delete-old-versions -1) ;; Never delete backups
(setq version-control t) ;; Honestly... don't remember but I'm sure I want this
(setq vc-make-backup-files t) ;; Also make backup files for version controller files
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))) ;; Store autosaves in this folder instead of next to the file
(setq inhibit-startup-screen t) ;; Don't show the starup screen
(setq create-lockfiles nil) ;; I don't work on systems where multiple people are editing the same files with emacs.
(if (version< "29.0" emacs-version)
    (pixel-scroll-precision-mode 1)) ;; Smooth Scrolling
(global-so-long-mode 1) ;; Stop trying to syntax highlight absurdly long strings
(global-set-key (kbd "C-s") 'swiper)
#+end_src

** Projectile

Projectile enriches Emacs's ability to understand git projects

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package projectile
  :bind (("s-p" . projectile-command-map)
	 ("C-c p" . projectile-command-map))
  :config (projectile-global-mode)
  (setq projectile-current-project-on-switch 'keep)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode +1))
#+end_src

** GPG Config

Emacs can nearly transparently use .gpg encrypted files in emacs. These settings enrich it slightly or make it less effort.

#+begin_src emacs-lisp :tangle ~/.emacs
(setq epa-file-encrypt-to "noonker@gmail.com") ;; Encrypt to my gpg key
(setf epa-pinentry-mode 'loopback) ;; No UI popup. Ask for password in modeline
#+end_src

* Tools
** One Liners

Anything in this section can be described in one sentence.

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package ag)
(use-package pass
  :config (global-set-key (kbd "<f12>") 'password-store-copy)) ;; Password Store
(use-package plantuml-mode) ;; Define graphs in code
#+end_src

** Eshell

Emacs shell settings

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package eshell-git-prompt)
(use-package eshell
  :bind (("C-c e" . counsel-esh-history)
	 ("C-<tab>" . yas-expand-from-trigger-key))
  )
(eshell-git-prompt-use-theme 'robbyrussell) ;; Eshell theme

(setq eshell-error-if-no-glob t
      eshell-hist-ignoredups t
      eshell-save-history-on-exit t
      eshell-prefer-lisp-functions nil
      eshell-destroy-buffer-when-process-dies t)

(add-hook 'eshell-mode-hook (lambda () (company-mode -1)))

(defun git-prompt-eshell ()
  "Git a git prompt"
  (let (beg dir git-branch git-dirty end)
    (if (eshell-git-prompt--git-root-dir)
      	(progn
      	  (setq eshell-git-prompt-branch-name (eshell-git-prompt--branch-name))
      	  (setq git-branch
      		(concat
      		 (with-face "git:(" 'eshell-git-prompt-robyrussell-git-face)
      		 (with-face (eshell-git-prompt--readable-branch-name) 'eshell-git-prompt-robyrussell-branch-face)
      		 (with-face ")" 'eshell-git-prompt-robyrussell-git-face)))
      	  (setq git-dirty
      		(when (eshell-git-prompt--collect-status)
      		  (with-face "✗" 'eshell-git-prompt-robyrussell-git-dirty-face)))
      	  (concat git-branch git-dirty)) "☮" )))

(setq eshell-prompt-function
      (lambda ()
      	(concat
      	 (propertize "┌─[" 'face 'org-level-4)
      	 (propertize (user-login-name) 'face 'bold)
      	 (propertize "@" 'face 'org-level-4)
      	 (if (is-tramp-window)
      	     (propertize (file-remote-p default-directory) 'face 'bold)
      	   (propertize (system-name) 'face 'bold))
      	 (propertize "]──[" 'face 'org-level-4)
      	 (propertize (format-time-string "%H:%M" (current-time)) 'face 'cursor)
      	 (propertize "]──[" 'face 'org-level-4)
      	 (propertize (concat (eshell/pwd)) 'face 'bold)
      	 (propertize "]──[" 'face 'org-level-4)
      	 (if (is-tramp-window) "🌎"
      	   (concat (propertize (git-prompt-eshell) 'face 'org-level-6)
      		   (if pyvenv-virtual-env-name (concat (propertize "]──[" 'face 'org-level-4)
      						       (propertize (format "venv:%s" pyvenv-virtual-env-name) 'face 'org-level-2)))))
      	 (propertize "]\n" 'face 'org-level-4)
      	 (propertize "└─>" 'face 'org-level-4)
      	 (propertize (if (= (user-uid) 0) " # " " $ ") 'face 'default)
	 )))

(setq eshell-visual-commands '("htop" "vi" "screen" "top" "less"
      			       "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
      			       "vim" "mitmproxy"))

(setq eshell-visual-subcommands '("git" "log" "diff" "show" "ssh"))

(setenv "PAGER" "cat")

(defalias 'ff 'find-file)
(defalias 'd 'dired)

(defun eshell/clear ()
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun eshell/gst (&rest args)
  (magit-status (pop args) nil)
  (eshell/echo))   ;; The echo command suppresses output
#+end_src

** Tramp

Tramp allows for nearly transparent editing of files on remote machines. Run =C-x C-f= and preface your url with =/ssh:user@host:= to connect to a remote hose and select a file.

#+begin_src emacs-lisp :tangle ~/.emacs
;;; no vc in tramp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
	      vc-ignore-dir-regexp
	      tramp-file-name-regexp))
(setq tramp-verbose 1)
(defadvice projectile-on (around exlude-tramp activate)
  "This should disable projectile when visiting a remote file"
  (unless  (--any? (and it (file-remote-p it))
		   (list
		    (buffer-file-name)
		    list-buffers-directory
		    default-directory
		    dired-directory))
    ad-do-it))

(setq projectile-mode-line "Projectile")

;; By default lets be safe in tramp
(add-hook
 'find-file-hook
 (lambda ()
   (when (file-remote-p default-directory)
     (read-only-mode t))))

;; Some more optimizations?
(setq projectile-auto-update-cache nil)
(setq projectile-dynamic-mode-line nil)
#+end_src

** Dired

#+begin_src emacs-lisp  :tangle ~/.emacs
(use-package dired-preview)
(define-key dired-mode-map (kbd "[") 'dired-preview-mode)
(define-key dired-mode-map (kbd "]") 'image-dired) 

(with-eval-after-load 'dired
  (require 'dired-x)
  ;; Set dired-x global variables here.  For example:
  ;; (setq dired-x-hands-off-my-keys nil)
  )

(setq dired-dwim-target t) ;; When moving a file assume I want to move it to the other dired buffer first
(setq dired-mouse-drag-files t) ;; Drag files from dired emacs

(define-key dired-mode-map (kbd "}") 'wdired-change-to-wdired-mode)
(define-key dired-mode-map (kbd "{") 'find-name-dired)  ;; Quick Search
#+end_src

** SMTP

This is my minimal SMTP setup for Protonmail Bridge

#+begin_src emacs-lisp :tangle ~/.emacs
#+end_src

** SomaFM

Drone Zone >>> All Else

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package somafm)
#+end_src

** ERC

IRC for Emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package erc
  :config
  (setq erc-hide-list '("JOIN" "PART" "QUIT")))
(use-package erc-colorize
  :config
  (erc-colorize-mode 1))
#+end_src

** Elfeed

[[https://github.com/skeeto/elfeed][Elfeed]] is an emacs RSS feed reader. I've blogged about features [[https://noonker.github.io/posts/2020-04-22-elfeed/][here]].

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package elfeed
  :bind (:map elfeed-search-mode-map
	      ("m" . elfeed-mail-todo)
	      ("t" . elfeed-w3m-open)
	      ("w" . elfeed-eww-open)
	      ("f" . elfeed-firefox-open)
	      ("o" . elfeed-org-open)
	      ("d" . elfeed-youtube-dl)
	      ("a" . elfeed-termux-open)
	      )

  :config
  (defun elfeed-mail-todo (&optional use-generic-p)
    "Mail this to myself for later reading"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	       do (elfeed-untag entry 'unread)
	       when (elfeed-entry-title entry)
	       do (todo it (elfeed-entry-link entry)))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-eww-open (&optional use-generic-p)
    "open with eww"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	       do (elfeed-untag entry 'unread)
	       when (elfeed-entry-link entry)
	       do (eww-browse-url it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-firefox-open (&optional use-generic-p)
    "open with firefox"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	       do (elfeed-untag entry 'unread)
	       when (elfeed-entry-link entry)
	       do (browse-url-firefox it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-youtube-dl (&optional use-generic-p)
    "youtube-dl"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	       do (elfeed-untag entry 'unread)
	       when (elfeed-entry-link entry)
	       do (yt-dl-it it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  (defun elfeed-org-open (&optional use-generic-p)
    "open with org-web-tools"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	       do (elfeed-untag entry 'unread)
	       when (elfeed-entry-link entry)
	       do (org-web-tools-read-url-as-org it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))
  )
#+end_src

** Mu4e

Email client for emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(if (not im-at-work)
    (progn (use-package mu4e
	     :straight
	     (:local-repo "/run/current-system/sw/share/emacs/site-lisp/mu4e"
			  :type built-in)
	     :commands (mu4e)
	     :init
	     (setq
	      mu4e-attachment-dir "~/Downloads"
	      mu4e-sent-folder   "/Sent"       ;; folder for sent messages
	      mu4e-drafts-folder "/Drafts"     ;; unfinished messages
	      mu4e-trash-folder  "/Trash"      ;; trashed messages
	      mu4e-refile-folder "/Archive")   ;; saved messages
	     (setq mu4e-get-mail-command "mbsync exchange")
	     (setq mu4e-update-interval 300)
	     (setq mail-user-agent 'mu4e-user-agent)
	     (global-set-key (kbd "C-c m m") `mu4e)
	     )

	   (use-package mu4e-alert
	     :after mu4e
	     :init
	     (mu4e-alert-enable-mode-line-display)
	     (setq mu4e-alert-interesting-mail-query
		   (concat
		    "flag:unread maildir:/INBOX "
		    ))
	     (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))

	   (use-package org-msg
	     :init
	     (setq mail-user-agent 'mu4e-user-agent)
	     (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
		   org-msg-startup "hidestars indent inlineimages"
		   org-msg-default-alternatives '((new		. (text html))
						  (reply-to-html	. (text html))
						  (reply-to-text	. (text)))
		   org-msg-convert-citation t)
	     (org-msg-mode))))
#+end_src

** Emacs Lisp Packages

These are emacs-lisp packages that I use often enough in scratch-buffers
that I'm requiring them outside of a package

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package ov)
(use-package request)
(use-package cl-lib)
#+end_src

** PCRE2EL

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package pcre2el)
#+end_src


** Mobile

Functions and mobile gadgets

#+begin_src emacs-lisp :tangle ~/.emacs
(defun copy-app-to-desktop (bundle-id)
  (let ((command (format "adb pull $(adb shell pm path %s | cut -d \":\" -f2 | head -n1 ) %s/%s.apk" bundle-id "$HOME/Desktop/" bundle-id)))
    (shell-command command)
    )
  )

(defun start-iproxy ()
  (interactive)
  (async-shell-command "iproxy 2222 22" "*iproxy*"))

(defun iphone-screenshot ()
  (interactive)
  (let  ((screenshot-name (nth 3 (split-string
				  (shell-command-to-string "cd /tmp/ && idevicescreenshot")))))
    (find-file (format "/tmp/%s" screenshot-name))
    )
  )

(defun get-android-apk ()
  (interactive)
  (copy-app-to-desktop
   (completing-read
    "Copy App: "
    (split-string (shell-command-to-string "adb shell pm list packages -3 | sed \"s/package://g\"")))))

(defun start-simulator ()
  (interactive)
  (let ((udid nil)
	(sim-option (completing-read
		     "Start Simulator: "
		     (split-string (shell-command-to-string "xcrun simctl list | grep Shutdown") "\n"))))
    (and (string-match "\\([0-9a-fA-F]\\{8\\}-[0-9a-fA-F]\\{4\\}-[0-9a-fA-F]\\{4\\}-[0-9a-fA-F]\\{4\\}-[0-9a-fA-F]\\{12\\}\\)" sim-option)
	 (setq udid (match-string 1 sim-option)))
    (if udid
	(shell-command (format "open -a Simulator --args -CurrentDeviceUDID %s" udid)))))

(defun android-start-emulator ()
  (interactive)
  
  (let ((avd (completing-read
	      "Emulator: "
	      (split-string
	       (shell-command-to-string "$HOME/Library/Android/sdk/emulator/emulator -list-avds") "\n"))))
    (if avd
	(shell-command (format "$HOME/Library/Android/sdk/emulator/emulator -avd %s -netdelay none -netspeed full -no-snapshot-load&" avd)))
    ))

(defun get-android-view ()
  (interactive)
  (let ((buffer-name "*ui-dump*"))
    (with-current-buffer (get-buffer-create buffer-name)
      (erase-buffer)
      (shell-command "adb shell uiautomator dump")
      (insert (shell-command-to-string "adb shell cat /sdcard/window_dump.xml"))
      (xml-mode)
      (sgml-pretty-print (point-min) (point-max))
      (switch-to-buffer buffer-name)
      )))
#+end_src


** Magit

Magit is git porcelain for Emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-save-repository-buffers nil))
#+end_src

** Counsel
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package counsel)
#+end_src

** Alert
#+begin_src  emacs-lisp :tangle ~/.emacs
(use-package alert
  :config
  (if (eq system-type 'darwin)
      (setq alert-default-style 'osx-notifier)))
#+end_src


** Kubernetes

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package kubel)
#+end_src

** Docker
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))

(setq docker-run-as-root t)
#+end_src

** Spray Mode

Spray mode is a speed-reading mode

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package spray)
(defun no-properties-pls ()
  (interactive)
  (let ((inhibit-read-only t))
    (set-text-properties (point-min) (point-max) nil)))
(global-set-key (kbd "<f9>") 'spray-mode)
#+end_src

* Programming

** LSP
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-header t)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-border (face-foreground 'default))
  )
#+end_src

** Flycheck

[[https://www.flycheck.org/en/latest/][Flycheck]] is a syntax checker for emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package flycheck
  :config
  (global-flycheck-mode)
  (setq-default flycheck-disabled-checker '(emacs-lisp-checkdoc)))
#+end_src

** Company

Company is an autocomplete option framework for emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package company
  :config
  (global-company-mode)
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.38)
  (setq company-minimum-prefix-length 2)

  (defun complete-or-indent ()
    (interactive)
    (if (company-manual-begin)
	(company-complete-common)
      (indent-according-to-mode)))

  (defun indent-or-complete ()
    (interactive)
    (if (looking-at "\\_>")
	(company-complete-common)
      (indent-according-to-mode))))
#+end_src

** Evil?

Lispy mode makes lisp-mode editing significantly more efficent

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
  )

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))

(use-package paredit)

(use-package evil-paredit)

(defun hook-the-parenthesis-things ()
  (paredit-mode 1)
  (evil-paredit-mode 1))

(add-hook 'emacs-lisp-mode-hook 'hook-the-parenthesis-things)

(evil-ex-define-cmd "wq" 'save-and-kill-this-buffer)

(defun save-and-kill-this-buffer()
  (interactive)
  (save-buffer)
  (kill-current-buffer))
#+end_src

** SBCL

Common Lisp configs

#+begin_src emacs-lisp :tangle ~/.emacs
(setq slime-contribs '(slime-fancy))
(if (file-exists-p "~/.roswell/helper.el")
    (load (expand-file-name "~/.roswell/helper.el")))
(setq inferior-lisp-program "ros -Q run")
#+end_src


** C/C++ / Platformio-DCMAKE_PREFIX_PATH=/usr/local/opt/llvm

On MacOS you need to add =-DCMAKE_PREFIX_PATH=/usr/local/opt/llvm= after =cmake= to run =install-irony-server= per [[https://github.com/Sarcasm/irony-mode/issues/167][this]] git issue.

#+begin_src emacs-lisp :tangle ~/.emacs
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(add-hook 'c-mode-common-hook (lambda () (lsp) ))

(with-eval-after-load 'lsp-mode)

(use-package irony)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(add-to-list 'company-backends 'company-irony) ;; Add the required company backend.

;; Enable irony for all c++ files, and platformio-mode only
;; when needed (platformio.ini present in project root).
(add-hook 'c++-mode-hook (lambda ()
			   (irony-mode)
			   (irony-eldoc)
			   (platformio-conditionally-enable)))

;; Use irony's completion functions.
(add-hook 'irony-mode-hook
	  (lambda ()
	    (define-key irony-mode-map [remap completion-at-point]
			'irony-completion-at-point-async)

	    (define-key irony-mode-map [remap complete-symbol]
			'irony-completion-at-point-async)

	    (irony-cdb-autosetup-compile-options)))

;; Setup irony for flycheck.
;;  (add-hook 'flycheck-mode-hook 'flycheck-irony-setup)

(use-package ggtags)
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
	      (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(setq-local imenu-create-index-function #'ggtags-build-imenu-index)

(add-to-list 'company-backends 'company-c-headers)
(setq wdired-allow-to-change-permissions t)
#+end_src

** Swift
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package swift-mode)
#+end_src

** Python

Python + LSP

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package python
  :bind (("C-c C-c" . python-shell-send-region)))

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-pyright)
                         (lsp))))  ; or lsp-deferred
(use-package elpy
  :ensure t
  :init
  (elpy-enable))

(setq elpy-rpc-virtualenv-path 'global)
(setenv "WORKON_HOME" "~/.virtualenvs")
(pyvenv-workon "p310")
(setq python-shell-interpreter "python")
#+end_src

** Platformio

Platformio is for programming embedded devices

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package platformio-mode)
#+end_src

** Typescript

Typescript + LSP

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package typescript-mode)

(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
	 (typescript-mode . tide-hl-identifier-mode)
	 ;; (before-save . tide-format-before-save)
	 ))
#+end_src

** Clojure

Clojure + LSP

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package lsp-treemacs)
(use-package clj-refactor)

(add-hook 'clojure-mode-hook 'lsp)
(add-hook 'clojurescript-mode-hook 'lsp)
(add-hook 'clojurec-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-minimum-prefix-length 1
      lsp-lens-enable t
      lsp-signature-auto-activate nil
      lsp-enable-indentation nil ; uncomment to use cider indentation instead of lsp
      lsp-enable-completion-at-point nil ; uncomment to use cider completion instead of lsp
      )

(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
	 ("\\.edn\\'" . clojure-mode)
	 ))

(use-package cider
  :ensure t
  :defer t
  :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
  :diminish subword-mode
  :config
  (setq nrepl-log-messages t
	cider-repl-display-in-current-window t
	cider-repl-use-clojure-font-lock t
	cider-prompt-save-file-on-load 'always-save
	cider-font-lock-dynamically '(macro core function var)
	nrepl-hide-special-buffers t
	cider-overlays-use-font-lock t)
  (cider-repl-toggle-pretty-printing))

(add-hook 'clojure-mode-hook #'lispy-mode)
(add-hook 'clojure-mode-hook #'subword-mode)
(add-hook 'clojure-mode-hook #'eldoc-mode)
#+end_src

** Json
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package json)
(use-package json-mode)
(use-package counsel-jq) ;; Query json file with jq + counsel
#+end_src

** Yaml
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package yaml)
#+end_src

* PDF

** PDF Tools
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package pdf-tools
  :straight t
  :config
  (pdf-tools-install))

(add-hook 'pdf-view-mode-hook (lambda () (progn (display-line-numbers-mode -1))))
#+end_src

** \LaTeX
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package tex
  :straight auctex)

;; CDLatex settings
(use-package cdlatex
  :ensure t
  :hook (LaTeX-mode . turn-on-cdlatex)
  :bind (:map cdlatex-mode-map 
              ("<tab>" . cdlatex-tab)))

;; Yasnippet settings
(use-package yasnippet
  :ensure t
  :hook ((LaTeX-mode . yas-minor-mode)
         (post-self-insert . my/yas-try-expanding-auto-snippets))
  :config
  (use-package warnings
    :config
    (cl-pushnew '(yasnippet backquote-change)
                warning-suppress-types
                :test 'equal))

  (setq yas-triggers-in-field t)

  (add-to-list 'yas-snippet-dirs (file-name-concat "~/git" "dotfiles/snippets"))
  
  ;; Function that tries to autoexpand YaSnippets
  ;; The double quoting is NOT a typo!
  (defun my/yas-try-expanding-auto-snippets ()
    (when (and (boundp 'yas-minor-mode) yas-minor-mode)
      (let ((yas-buffer-local-condition ''(require-snippet-condition . auto)))
        (yas-expand)))))

(use-package yasnippet-snippets)

(yas-global-mode)

(yas-reload-all)

;; CDLatex integration with YaSnippet: Allow cdlatex tab to work inside Yas
;; fields
(use-package cdlatex
  :hook ((cdlatex-tab . yas-expand)
         (cdlatex-tab . cdlatex-in-yas-field))
  :config
  (use-package yasnippet
    :bind (:map yas-keymap
		("<tab>" . yas-next-field-or-cdlatex)
		("TAB" . yas-next-field-or-cdlatex))
    :config
    (defun cdlatex-in-yas-field ()
      ;; Check if we're at the end of the Yas field
      (when-let* ((_ (overlayp yas--active-field-overlay))
                  (end (overlay-end yas--active-field-overlay)))
        (if (>= (point) end)
            ;; Call yas-next-field if cdlatex can't expand here
            (let ((s (thing-at-point 'sexp)))
              (unless (and s (assoc (substring-no-properties s)
                                    cdlatex-command-alist-comb))
                (yas-next-field-or-maybe-expand)
                t))
          ;; otherwise expand and jump to the correct location
          (let (cdlatex-tab-hook minp)
            (setq minp
                  (min (save-excursion (cdlatex-tab)
                                       (point))
                       (overlay-end yas--active-field-overlay)))
            (goto-char minp) t))))

    (defun yas-next-field-or-cdlatex nil
      (interactive)
      "Jump to the next Yas field correctly with cdlatex active."
      (if
          (or (bound-and-true-p cdlatex-mode)
              (bound-and-true-p org-cdlatex-mode))
          (cdlatex-tab)
        (yas-next-field-or-maybe-expand)))))

(use-package latex-preview-pane)

(with-eval-after-load 'org
  (progn
    (add-to-list 'org-latex-packages-alist '("" "tcolorbox" t))
    (add-to-list 'org-latex-packages-alist '("" "minted" t))
    (add-to-list 'org-latex-packages-alist '("" "lipsum" t))))

(setq org-preview-latex-default-process 'imagemagick)

(use-package org-contrib
  :config (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))

(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src


** Org Mode

*** Verb
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package verb)
#+end_src

*** Org One Liners
#+begin_src emacs-lisp :tangle ~/.emacs
(setq org-fontify-whole-heading-line t)
(setq org-startup-folded t)


(setq org-directory "~/org")
(setq org-agenda-basedir "~/org/tasks")

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))) ;; Add special bullets
(setq org-startup-align-all-tables t) ;; Aligns tables when a file is opened
(setq org-startup-shrink-all-tables t) ;; Shrinks tables according to <x> tags in the column headers
(setq org-clock-out-switch-to-state "TODO")
(setq org-clock-out-remove-zero-time-clocks nil)
(setq org-startup-indented t) ;; Indent content of blocks to visual indent
(setq org-edit-src-content-indentation 0)
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
(setq org-startup-with-inline-images t)

(use-package hl-todo)
(setq org-src-fontify-natively t)

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c n n") 'org-capture)
(global-set-key (kbd "C-c n r n") 'org-roam-capture)
(global-set-key (kbd "C-c n r f") 'org-roam-node-find)
(global-set-key (kbd "C-c n r i") 'org-roam-node-insert)

(setq personal/node-types '('ctf
			    'investigation
			    'demo
			    'poetry
			    'music
			    'music-analysis))

(defun org-today-update-day ()
  (interactive)
  (setq org-archive-location (format "%s/archive/%s.org::" org-agenda-basedir (format-time-string "%Y-%m-%d"))))

(org-today-update-day)
#+end_src

*** Org Download
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package org-download
  :init
  (progn
    (setq org-image-actual-width (list 400))))
#+end_src

*** Org Transclusion
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package org-transclusion
  :after org)
#+end_src

*** Org Babel Packages
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package ob-sql-mode)
(use-package ob-typescript)
(use-package ob-markdown)
(use-package mermaid-mode)
(use-package ob-mermaid
  :config (setq ob-mermaid-cli-path "/usr/local/bin/mmdc"))
#+end_src

*** Org Babel
#+begin_src emacs-lisp :tangle ~/.emacs
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (python . t)
   (verb . t)
   (mermaid . t)
   (plantuml . t)
   (shell . t)
   (sql . t)
   (js . t)
   (sqlite . t)
   (gnuplot . t)
   (typescript . t)
   (latex . t)
   (C . t)
   (clojure . t)
   ))

(setq org-babel-clojure-backend 'cider)

(setq org-plantuml-jar-path
      (expand-file-name  "/opt/homebrew/Cellar/plantuml/1.2022.6/libexec/plantuml.jar"))

(setq org-confirm-babel-evaluate nil)
#+end_src

*** Org Agenda
#+begin_src emacs-lisp :tangle ~/.emacs
(setq org-archive-file-header-format nil)

(defun  org-init-agenda ()
  (interactive)
  (let ((initial '(("backlog.org" nil)
                   ("recurring.org" nil)
                   ("today.org" nil)
                   ("projects" t)
                   ("archive" t)))
        (todostr "#+TODO: TODO STRT | DONE WONTDO"))
    (if (not (file-directory-p org-agenda-basedir))
        (make-directory org-agenda-basedir))

    (dolist (element initial)
      (let ((name  (nth 0 element))
            (isdir (nth 1 element)))
        ;; If the file doesn't exist and not flagged as dir
        (if (and (not isdir)
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
            (write-region todostr nil (format "%s/%s" org-agenda-basedir name)))

        ;; If the file doesn't exist and is flagged as dir
        (if (and isdir
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
            (make-directory (format "%s/%s" org-agenda-basedir name)))))))


(setq org-agenda-files (append (list (format "%s/backlog.org" org-agenda-basedir)
                                     (format "%s/recurring.org" org-agenda-basedir)
                                     (format "%s/meetings.org" org-agenda-basedir)
                                     (format "%s/today.org" org-agenda-basedir))
                               (directory-files-recursively (format "%s/projects/" org-agenda-basedir) "^[0-9a-zA-Z\-_]*?\.org$")
                               ))

(setq org-archive-location (format "%s/archive/%s.org::" org-agenda-basedir (format-time-string "%Y-%m-%d")))

(defun org-agenda-new-day ()
  (interactive)
  (with-current-buffer (find-file (format "%s/today.org" org-agenda-basedir))
    (mark-whole-buffer)
    (kill-region (mark) (point))
    (if (= (buffer-size) 0) (insert "#+CREATED: %U\n#+LAST_MODIFIED: %U#+TODO: TODO IN-PROGRESS | DONE WONTDO\n\n* Tasks\n* Thoughts\n")))
  (org-agenda))

(defun org-complex-tasks ()
  (interactive)
  (let ((tasks  (quote ("TODO Create Jira Ticket"
                        "TODO Documentation"
                        "TODO Close Jira Ticket"))))
    (org-end-of-line)
    (insert " [/]")
    (org-insert-heading)
    (org-demote-subtree)
    (insert (car tasks))
    (dolist (element (cdr tasks))
      (org-insert-heading)
      (insert element))))
#+end_src

*** Org Refile
#+begin_src emacs-lisp :tangle ~/.emacs
(defun directory-files-if-exists (dir)
  (if (file-directory-p dir)
      (directory-files dir t)
    ""))

(setq org-blogpost-directory (directory-files-if-exists (format "%s/blog/content/posts" org-directory)))
(setq org-cheatsheet-directory (directory-files-if-exists (format "%s/cheatsheet" org-directory)))
(setq org-notes-directory (directory-files-if-exists (format "%s/notes" org-directory)))
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-allow-creating-parent-nodes t)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
#+end_src

*** Org Capture
#+begin_src emacs-lisp :tangle ~/.emacs
(setq org-capture-templates
      `(("b" "Backlog" entry (file+headline (lambda () (format "%s/backlog.org" org-agenda-basedir)) "Backlog")
	 "** TODO %?\n  %i\n  %a")
	("t" "Today" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
	 "\n** TODO %?\n SCHEDULED: %t")
	("n" "Now" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
	 "\n** TODO %?\n SCHEDULED: %t" :clock-in t :clock-keep t)
	("i" "Interrupt" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
	 "\n** TODO %?\n SCHEDULED: %t" :clock-in t :clock-resume t)
	("c" "Cookbook" entry (file "~/org/cookbook.org")
	 "%(org-chef-get-recipe-from-url)"
	 :empty-lines 1)
	("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
	 "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
	("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
	 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
	("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
	 "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
	("j" "Journal" entry (file+headline (lambda () (format "%s/journal/%s.org.gpg" org-directory (format-time-string "%Y-%m-%d"))) "Journal") "")
	("B" "Blog Post" plain (file (lambda () (format "%s/blog/noonker/content/posts/%s-%s.org" org-directory (format-time-string "%Y-%m-%d") (replace-regexp-in-string " " "-" (downcase (read-string "Name: ")))))) 
	 ,(format "#+title: TITLE\n#+subtitle:\n#+date: %s\n#+tags[]: tech, emacs\n#+draft: false\n\n" (format-time-string "%Y-%m-%d")))
	)
      )

(setq org-roam-capture-templates '(
				   ("n" "notes" plain "%?"
				    :target (file+head "notes/%<%Y%m%d%H%M%S>-${slug}/${slug}.org"
						       "#+title: ${title}\n#+ROAM_ALIAS:\n#+ROAM_TAGS: \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n")
				    :unnarrowed t)
				   ("e" "encrypted notes" plain "%?"
				    :target (file+head "notes/%<%Y%m%d%H%M%S>-${slug}/${slug}.org.gpg"
						       "#+title: ${title}\n#+ROAM_ALIAS:\n#+ROAM_TAGS: \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n\n")
				    :unnarrowed t)
				   ))
#+end_src

*** Org Roam
#+begin_src emacs-lisp :tangle ~/.emacs
(setq org-roam-directory "~/org/")
(use-package websocket)

(use-package org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
	org-roam-ui-follow t
	org-roam-ui-update-on-save t
	org-roam-ui-open-on-start t
	))

(org-roam-db-autosync-mode) ;; Automatically update the org roam database 
#+end_src

*** Org Protocol
#+begin_src emacs-lisp :tangle ~/.emacs
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform))
  )

#+end_src

*** Org Packages
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package org-bullets)
(use-package org-web-tools)
#+end_src

*** Org eXport
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package ox-reveal
  :config
  (setq org-reveal-root "file:///home/user/git/reveal.js"))

(setq org-export-with-drawers nil)

(setq org-src-fontify-natively t)
(setq org-latex-listings 'minted
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src

*** Org + Hugo

Blogging with hugo

#+begin_src emacs-lisp :tangle ~/.emacs
(defun replace-regexp-entire-buffer (pattern replacement)
  "Perform regular-expression replacement throughout buffer."
  (interactive
   (let ((args (query-replace-read-args "Replace" t)))
     (setcdr (cdr args) nil)    ; remove third value returned from query---args
     args))
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward pattern nil t)
      (replace-match replacement))))

(defun blog-cleanup-buffer ()
  (interactive)
  (replace-regexp-entire-buffer "../../static" ""))

(defun blog-push-to-git ()
  (interactive)
  (async-shell-command (format "cd %s/blog/noonker/public/ && git add . && git commit -m \"update\" && git push") "Blog-Update")
  )

(defun insert-blog-tag ()
  (interactive)
  (insert (completing-read "tag: " '("thoughts" "emacs" "tech" "hell" "accordion" "ctf" "security" "tools" "email" "privacy"))))
#+end_src

** Easydraw

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package edraw-org
  :straight (:host github :repo "misohena/el-easydraw" :files ("dist" "*.el"))
  :config (with-eval-after-load 'org
	    (require 'edraw-org)
	    (edraw-org-setup-default)))
#+end_src

** Markdown
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package markdown-mode)
#+end_src

** Flyspell
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package flyspell
  :config
  (setq ispell-program-name "aspell"
	ispell-list-command "--list")
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  (add-hook 'python-mode-hook
	    (lambda ()
	      (flyspell-prog-mode)
	      ))
  )
#+end_src

** Languagetool

Run =brew install languagetool= to install on mac

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package langtool
  :config
  (setq langtool-bin "/usr/local/bin/languagetool")
  (setq langtool-http-server-host "localhost"
	langtool-http-server-port 8081)
  )
#+end_src

* Custom Functions
** Mac Open

Replace spotlight with emacs

#+begin_src emacs-lisp :tangle ~/.emacs
(defun mac-open ()
  "Open a mac application... In Emacs.... why not"
  (interactive)
  (call-process-shell-command
   (format " open /Applications/%s"
	   (completing-read
	    "Mac Open: "
	    (directory-files "/Applications")))))
#+end_src

** Youtube Download

Download vidoes with youtube-dl

#+begin_src emacs-lisp :tangle ~/.emacs
(defun yt-dl-it (url)
  "Downloads the URL in an async shell"
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "yt-dlp %s" url))))
#+end_src

** Image to Text

Use tesseract-ocr to turn an image into text and insert it into this buffer

#+begin_src emacs-lisp :tangle ~/.emacs
(defun image-to-text ()
  (interactive)
  (if buffer-file-name
      (progn
	;; Convert the file to a tif file for tesseract consumption.
	(shell-command (concat "convert " buffer-file-name " -resize 400% -type Grayscale " buffer-file-name ".tif"))
	;; Convert the file from tif to txt using tesseract.
	(shell-command (concat "tesseract -l eng " buffer-file-name ".tif " buffer-file-name))
	;; Delete the tif file artifact.
	(shell-command (concat "rm " buffer-file-name ".tif"))
	;; Open the text file in buffer, this should be the text found in the image converted.
	(find-file (concat buffer-file-name ".txt")))))
#+end_src

** CNC Mode

These functions enable options where you can have one buffer of commands to run and several other open buffers that the commands will be sent to.

#+begin_src emacs-lisp :tangle ~/.emacs
;; cnc-command
(defun visible-buffers ()
  "Definition"
  (interactive)
  (mapcar '(lambda (window) (buffer-name (window-buffer window))) (window-list)))

(defun all-buffers-except-this ()
  "Definition"
  (interactive)
  (delete (buffer-name (current-buffer)) (visible-buffers))
  )

(defun cnc-from-file ()
  "A command to run commands on the other open buffers"
  (interactive)
  (dolist (elt (all-buffers-except-this))
    (comint-send-string elt (format "%s\n" (thing-at-point `line))))
  (next-line)
  t
  )

(defun cnc-prompt (cmd)
  "A command to run commands on the other open buffers"
  (interactive "sCmd: ")
  (dolist (elt (visible-buffers))
    (comint-send-string elt (format "%s\n" cmd)))
  )

(defun split-cnc (number)
  (interactive "N")
  "Function to split windows into one major window and multiple minor ansi-terms"
  (split-window-horizontally)
  (other-window 1)
  (ansi-term "/bin/bash" "cnc")
  (while (> number 1)
    (split-window-vertically)
    (ansi-term "/bin/bash" "cnc")
    (other-window 1)
    (setq number (+ -1 number)))
  (ansi-term "/bin/bash" "cnc")
  (other-window 1)
  (balance-windows))

(global-set-key (kbd "C-c y") `cnc-prompt)
(global-set-key (kbd "C-c C-.") `cnc-from-file)
#+end_src


** Typit
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package speed-type)
#+end_src

** Atomic Chrome
#+begin_src emacs-lisp :tangle ~/.emacs
(use-package atomic-chrome)
(require 'atomic-chrome)
(atomic-chrome-start-server)
#+end_src

** Rainbow Delimeters

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package rainbow-delimiters)
#+end_src

** Misc

These functions are helpers and should be self explanitory

#+begin_src emacs-lisp :tangle ~/.emacs
(defun is-tramp-window ()
  (if (file-remote-p default-directory) t nil))

(defun no-fonts-pls ()
  (interactive)
  (let ((inhibit-read-only t))
    (set-text-properties (point-min) (point-max) nil)))

(defun what-is-my-ip ()
  (interactive)
  (message "IP: %s"
	   (with-current-buffer (url-retrieve-synchronously "https://api.`ipify.org")
	     (buffer-substring (+ 1 url-http-end-of-headers) (point-max)))))

(defun character-below ()
  (save-excursion
    (next-line)
    (string (char-after (point)))))

(defun replace-below (cur rep bel)
  (interactive)
  (let ((pos 1)
	(tmp))
    (while (< pos (point-max))
      (if (equal cur (string (char-after pos)))
	  (if (equal bel (character-above))
	      (progn (delete-char 1) (insert rep))
	    ))
      (setq pos (+ 1 pos))
      (goto-char pos)
      )))

(defun ruthless-kill ()
  "Kill the line without copying it"
  (interactive)
  (delete-region (point) (line-end-position)))

(global-set-key (kbd "C-x j") 'kill-current-buffer)
(global-set-key (kbd "C-c k") 'ruthless-kill)

(defun insert-current-date ()
  "Insert the current date"
  (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

(defun selenium()
  (interactive)
  (save-excursion
    (async-shell-command "java -jar $HOME/Documents/selenium.jar")))

(defun toggle-maximize-buffer ()
  "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
      (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))

(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

;; Easy window splitting
(defun split-maj-min (number)
  (interactive "N")
  "Function to split windows into one major window and multiple minor windows"
  (split-window-horizontally)
  (other-window 1)
  (while (> number 1)
    (setq number (+ -1 number))
    (split-window-vertically))
  (balance-windows))

(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
	     buffer-file-name))))

(defun proxy (text &optional port)
  (interactive "sHost: ")
  (async-shell-command (format "ssh -D 1337 -C -q -N %s" text) (format "*proxy: %s*" text)))

(defun todo (text &optional body)
  (interactive "sTodo: ")
  (compose-mail-other-window "noonker@pm.me" text)
  (mail-text)
  (if body
      (insert body))
  (message-send-and-exit)
  )

(global-set-key (kbd "C-c C-t") 'todo)
#+end_src

** Doom Modeline

The doom modeline looks better than the stock emacs modeline.

#+begin_src emacs-lisp :tangle ~/.emacs
(use-package doom-modeline
  :config (doom-modeline-mode 1)
  (setq doom-modeline-height 17)
  )

;; If non-nil, cause imenu to see `doom-modeline' declarations.
;; This is done by adjusting `lisp-imenu-generic-expression' to
;; include support for finding `doom-modeline-def-*' forms.
;; Must be set before loading doom-modeline.
(setq doom-modeline-support-imenu t)

;; How wide the mode-line bar should be. It's only respected in GUI.
(setq doom-modeline-bar-width 4)

;; Whether to use hud instead of default bar. It's only respected in GUI.
(setq doom-modeline-hud nil)

;; The limit of the window width.
;; If `window-width' is smaller than the limit, some information won't be
;; displayed. It can be an integer or a float number. `nil' means no limit."
(setq doom-modeline-window-width-limit 85)

;; How to detect the project root.
;; nil means to use `default-directory'.
;; The project management packages have some issues on detecting project root.
;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
;; to hanle sub-projects.
;; You can specify one if you encounter the issue.
(setq doom-modeline-project-detection 'auto)

;; Determines the style used by `doom-modeline-buffer-file-name'.
;;
;; Given ~/Projects/FOSS/emacs/lisp/comint.el
;;   auto => emacs/l/comint.el (in a project) or comint.el
;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
;;   truncate-with-project => emacs/l/comint.el
;;   truncate-except-project => ~/P/F/emacs/l/comint.el
;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
;;   truncate-all => ~/P/F/e/l/comint.el
;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
;;   relative-from-project => emacs/lisp/comint.el
;;   relative-to-project => lisp/comint.el
;;   file-name => comint.el
;;   buffer-name => comint.el<2> (uniquify buffer name)
;;
;; If you are experiencing the laggy issue, especially while editing remote files
;; with tramp, please try `file-name' style.
;; Please refer to https://github.com/bbatsov/projectile/issues/657.
(setq doom-modeline-buffer-file-name-style 'auto)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon t)

;; Whether display the icon for `major-mode'. It respects option `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `nerd-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects option `doom-modeline-icon'.
(setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects option `doom-modeline-icon' and option `doom-modeline-buffer-state-icon'.
(setq doom-modeline-buffer-modification-icon t)

;; Whether display the lsp icon. It respects option `doom-modeline-icon'.
(setq doom-modeline-lsp-icon t)

;; Whether display the time icon. It respects option `doom-modeline-icon'.
(setq doom-modeline-time-icon t)

;; Whether display the live icons of time.
;; It respects option `doom-modeline-icon' and option `doom-modeline-time-icon'.
(setq doom-modeline-time-live-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
(setq doom-modeline-unicode-fallback nil)

;; Whether display the buffer name.
(setq doom-modeline-buffer-name t)

;; Whether highlight the modified buffer name.
(setq doom-modeline-highlight-modified-buffer-name t)

;; When non-nil, mode line displays column numbers zero-based.
;; See `column-number-indicator-zero-based'.
(setq doom-modeline-column-zero-based t)

;; Specification of \"percentage offset\" of window through buffer.
;; See `mode-line-percent-position'.
(setq doom-modeline-percent-position '(-3 "%p"))

;; Format used to display line numbers in the mode line.
;; See `mode-line-position-line-format'.
(setq doom-modeline-position-line-format '("L%l"))

;; Format used to display column numbers in the mode line.
;; See `mode-line-position-column-format'.
(setq doom-modeline-position-column-format '("C%c"))

;; Format used to display combined line/column numbers in the mode line. See `mode-line-position-column-line-format'.
(setq doom-modeline-position-column-line-format '("%l:%c"))

;; Whether display the minor modes in the mode-line.
(setq doom-modeline-minor-modes nil)

;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count nil)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
;; remove the modes from `doom-modeline-continuous-word-count-modes'.
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

;; Whether display the buffer encoding.
(setq doom-modeline-buffer-encoding t)

;; Whether display the indentation information.
(setq doom-modeline-indent-info nil)

;; Whether display the total line number。
(setq doom-modeline-total-line-number nil)

;; If non-nil, only display one number for check information if applicable.
(setq doom-modeline-check-simple-format t)

;; The maximum number displayed for notifications.
(setq doom-modeline-number-limit 99)

;; The maximum displayed length of the branch name of version control.
(setq doom-modeline-vcs-max-length 12)

;; Whether display the workspace name. Non-nil to display in the mode-line.
(setq doom-modeline-workspace-name t)

;; Whether display the perspective name. Non-nil to display in the mode-line.
(setq doom-modeline-persp-name t)

;; If non nil the default perspective name is displayed in the mode-line.
(setq doom-modeline-display-default-persp-name nil)

;; If non nil the perspective name is displayed alongside a folder icon.
(setq doom-modeline-persp-icon t)

;; Whether display the `lsp' state. Non-nil to display in the mode-line.
(setq doom-modeline-lsp t)

;; Whether display the GitHub notifications. It requires `ghub' package.
(setq doom-modeline-github nil)

;; The interval of checking GitHub.
(setq doom-modeline-github-interval (* 30 60))

;; Whether display the modal state.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal t)

;; Whether display the modal state icon.
;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
(setq doom-modeline-modal-icon t)

;; Whether display the modern icons for modals.
(setq doom-modeline-modal-modern-icon t)

;; When non-nil, always show the register name when recording an evil macro.
(setq doom-modeline-always-show-macro-register nil)

;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
(setq doom-modeline-mu4e nil)

;; also enable the start of mu4e-alert
(if (not im-at-work) (mu4e-alert-enable-mode-line-display))

;; Whether display the gnus notifications.
(setq doom-modeline-gnus t)

;; Whether gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
(setq doom-modeline-gnus-timer 2)

;; Wheter groups should be excludede when gnus automatically being updated.
(setq doom-modeline-gnus-excluded-groups '("dummy.group"))

;; Whether display the IRC notifications. It requires `circe' or `erc' package.
(setq doom-modeline-irc t)

;; Function to stylize the irc buffer names.
(setq doom-modeline-irc-stylize 'identity)

;; Whether display the battery status. It respects `display-battery-mode'.
(setq doom-modeline-battery t)

;; Whether display the time. It respects `display-time-mode'.
(setq doom-modeline-time t)

;; Whether display the misc segment on all mode lines.
;; If nil, display only if the mode line is active.
(setq doom-modeline-display-misc-in-all-mode-lines t)

;; The function to handle `buffer-file-name'.
(setq doom-modeline-buffer-file-name-function #'identity)

;; The function to handle `buffer-file-truename'.
(setq doom-modeline-buffer-file-truename-function #'identity)

;; Whether display the environment version.
(setq doom-modeline-env-version t)
;; Or for individual languages
(setq doom-modeline-env-enable-python t)
(setq doom-modeline-env-enable-ruby t)
(setq doom-modeline-env-enable-perl t)
(setq doom-modeline-env-enable-go t)
(setq doom-modeline-env-enable-elixir t)
(setq doom-modeline-env-enable-rust t)

;; Change the executables to use for the language version string
(setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
(setq doom-modeline-env-ruby-executable "ruby")
(setq doom-modeline-env-perl-executable "perl")
(setq doom-modeline-env-go-executable "go")
(setq doom-modeline-env-elixir-executable "iex")
(setq doom-modeline-env-rust-executable "rustc")

;; What to display as the version while a new one is being loaded
(setq doom-modeline-env-load-string "...")

;; By default, almost all segments are displayed only in the active window. To
;; display such segments in all windows, specify e.g.
(setq doom-modeline-always-visible-segments '(mu4e irc))

;; Hooks that run before/after the modeline version string is updated
(setq doom-modeline-before-update-env-hook nil)
(setq doom-modeline-after-update-env-hook nil)
#+end_src

* AI

** ChatGPT
#+begin_src emacs-lisp :tangle ~/.emacs
(if (not im-at-work)
    (use-package gptel
      :straight (:host github :repo "karthink/gptel" :files ("dist" "*.el"))
      :config (setq gptel-api-key (password-store-get "Internet/openai"))
      (setq
       gptel-model "mixtral"
       gptel-backend (gptel-make-ollama "Ollama"
		       :host "localhost:11434"
		       :stream t
		       :models '("mixtral")))))
#+end_src

** Copilot

#+begin_src emacs-lisp :tangle ~/.emacs
(if (not im-at-work)

    (use-package copilot
      :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
      :ensure t
      :bind (:map copilot-completion-map
		  ("C-c c c" . #'copilot-accept-completion)
		  ("C-c c n" .  #'copilot-next-completion))
      :init
      (add-hook 'prog-mode-hook #'copilot-mode)
      )
  )
#+end_src

* Finally
Load my RSS feeds
#+begin_src emacs-lisp :tangle ~/.emacs
(if (not im-at-work)
    (load-file "~/.password-store/Config/elfeed.el.gpg"))
#+end_src

* Work Config
#+begin_src emacs-lisp :tangle ~/.emacs
(if im-at-work
    (progn
      (org-babel-lob-ingest "~/org/config.org")
      (org-sbe work-config)))
#+end_src
