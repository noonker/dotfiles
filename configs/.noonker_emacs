;;; .emacs -- WIP emacs configuration
;-*-Emacs-Lisp-*-

;;; Commentary:
;;
;; I'm just here so I won't get fined
;; Hey future josh, here's a debugging statement for ya
;; (setq debug-on-error t)
;; (setq request-message-level 'info)
;; (setq request-log-level 'debug)
;; (setq tramp-verbose 10)
;; (setq request-log-level (quote blather))
;; (setq request-message-level (quote blather))
;;; Notes:
;;
;; This is probably not the best place for notes
;; but oh well!
;; For artist-mode and mac-print-page use an area of 67 wide  x 51 long

;;
;;; Code:

;; Set up repos and ensure desired files are installed
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

;; Set exec-path
;; (when (memq window-system '(mac ns x))
;;  (exec-path-from-shell-initialize))

;; Assuming you wish to install "iedit" and "magit"
(ensure-package-installed 'iedit
                          'magit
                          'flycheck
                          'helm
                          'projectile
                          'company
                          'autopair
                          'dumb-jump
                          'es-mode
                          'restclient
			  'cyberpunk-theme
                          'exec-path-from-shell
                          'excorporate
                          'mediawiki
                          'erc-colorize
                          'mingus
                          'emojify
                          'minimap
                          'request
                          'multiple-cursors
                          'isend-mode
                          'pcap-mode
                          'ace-popup-menu
                          'ipcalc
                          'neotree
			  'org-jira
                          'all-the-icons
                          'rainbow-delimiters
                          'rainbow-mode
                          'ace-jump-mode
                          'auctex
                          'howdoi
                          'docker
                          'magithub
                          'speed-type
                          'latex-preview-pane
                          'js-comint
                          'spray
                          'powershell
                          'helm-pass
                          'undo-tree
                          'elfeed
                          'twittering-mode
			  'ace-window
                          'eshell-git-prompt
                          'ein
                          'flymd
                          'pdf-tools
                          'sx
                          'system-packages
                          'fish-completion
                          'easy-hugo
                          'slack
                          'ssh
                          'google-translate
                          'gnuplot
                          'gnuplot-mode
                          'smtpmail-multi
                          'gnus-desktop-notify
                          'free-keys
                          'yara-mode
                          'csv-mode
                          'emms
			  'slime
			  'helm-projectile
			  'chess
			  'processing-mode
			  'fish-mode
			  'ov
			  'htmlize
			  'ob-restclient
			  'w3m
			  'yaml-mode
			  'platformio-mode
			  'irony
			  'flycheck-irony
			  'cider
			  'auto-complete
			  'solarized-theme
			  'helm-ag
			  'ag
			  'vterm
			  'mastodon
			  'company-jedi
			  'evil
			  'doom-modeline
			  'elpy
			  'ob-sql-mode
			  'yafolding
			  'org-bullets
			  'dockerfile-mode
			  'paredit
			  'notmuch
			  'yasnippet-snippets
			  'expand-region
			  'haskell-mode
			  'kubernetes
			  'plantuml-mode
			  'ggtags
			  'helm-gtags
			  'company-c-headers
			  'docker-tramp
			  'exwm
                          )

(setq doom-modeline-height 16)
(ac-config-default)
(require 'cl)
(require 'epg-config)
(require 'mediawiki)
(require 'doom-modeline)
(doom-modeline-mode 1)

(setq org-babel-python-command "python3")
(global-set-key (kbd "C-=") 'er/expand-region)
;; (when (not (memq window-system '(mac ns)))
;;   (setenv "QUBES_GPG_DOMAIN" "gpg-server")
;;   (customize-set-variable 'epg-gpg-program "/usr/bin/qubes-gpg-client-wrapper")
;;   (push (cons 'OpenPGP (epg-config--make-gpg-configuration epg-gpg-program))
;;        epg--configurations))

(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))

;;(require 'emms-setup)
;;(emms-all)
;; (emms-default-players)
(require 'ein-jupyter)
(require 'helm)
(global-flycheck-mode)
(global-company-mode)

;; Python iPython
;; (setq
;;  python-shell-interpreter "ipython"
;;  python-shell-interpreter-args "--colors=Linux --profile=default"
;;  python-shell-prompt-regexp "In \\[[0-9]+\\]: "
;;  python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
;;  python-shell-completion-setup-code
;;  "from IPython.core.completerlib import module_completion"
;;  python-shell-completion-module-string-code
;;  "';'.join(module_completion('''%s'''))\n"
;;  python-shell-completion-string-code
;;  "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
;; IPython autoreloading && debugging registers

(set-register ?d '"import pdb\npdb.set_trace()")
(set-register ?r '"%load_ext autoreload\n%autoreload 2")
(set-register ?e '"sudo docker run -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2 -v \"$PWD/config\":/usr/share/elasticsearch/config")
(set-register ?c '"sudo socat TCP-LISTEN:6001,reuseaddr,fork EXEC:\"qrexec-client-vm screenshare my-screenshare\"&")
(set-register ?p '"\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)")
(set-register ?o '"\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}")
(set-register ?i '"\\(\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)\\|\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}\\)")
(set-register ?s '";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.
")
(set-register ?f "#+BEGIN_SRC emacs-lisp
(hunting-emails)
#+END_SRC")

;; erc-colors
(erc-colorize-mode 1)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-c 2") 'helm-do-ag)

(setq projectile-completion-system 'helm)
(setq projectile-enable-caching t)
;; (helm-projectile-on)
(setq linum-format "%d ")

(set-face-attribute 'flycheck-warning nil
                    :foreground "black"
                    :background "yellow")
(set-face-attribute 'flycheck-error nil
                    :foreground "black"
                    :background "red")
(set-face-attribute 'flycheck-info nil
                    :foreground "black"
                    :background "green")

(setq url-user-agent " ")
;;(require 'whitespace)
;;(setq whitespace-style '(face empty tabs lines-tail trailing))
;;(global-whitespace-mode t)
(projectile-global-mode)
(autopair-global-mode 1)

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
;; Ensure tramp uses remote path
;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

;; (setq tramp-auto-save-directory "/tmp")

;; Twitter password shenanagans
(setq twittering-use-master-password t)

;; Icicles mode
;; (icy-mode 1)

(require 'recentf)
(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode 1)

;; Ace menu
(ace-popup-menu-mode 1)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; Reveal
(setq org-reveal-root "file:///home/user/git/reveal.js")

;; Eshell theme
(eshell-git-prompt-use-theme 'robbyrussell)

;; very good comment

;; Windmove
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Macro for OS checking
;; https://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))

;; (when (not (memq window-system '(mac ns)))
;;   (setq-default explicit-shell-file-name "/usr/bin/bash"))


(when (memq window-system '(mac ns))
;; (setq-default explicit-shell-file-name "/bin/bash")
  )

;; Enable mouse support
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] (lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] (lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
  )
;; Slack code for highlighted text
;; Todo auto expand the selected reason
(defun sc (b e)
  "adds slack tags for code"
  (interactive "r")
  (save-restriction
    (narrow-to-region b e)
    (save-excursion
      (goto-char (point-min))
        (insert (format "%s\n" "```"))
	(goto-char (point-max))
        (insert (format "\n%s" "```"))
        )))

;; (xclip-mode 1)

(progn
 ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://ergoemacs.org/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face indentation spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (indentation [127789])
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))

(when (memq window-system '(mac ns))
  ;; Enable copy and paste
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	(process-send-string proc text)
	(process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)
;;  (setenv "SHELL" "/bin/bash")
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))

;; ANSI term options
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (elasticsearch . t)
   (python . t)
   (restclient . t)
   (plantuml . t)
   (shell . t)
   (sql . t)
   (sqlite . t)
   (gnuplot . t)
   (ein . t)))

(setq org-plantuml-jar-path
      (expand-file-name "~/Documents/plantuml.jar"))

;; Shorten yes and no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Spaces, not tabs
(setq tab-width 2
      indent-tabs-mode nil)

;; Misc
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "RET") 'newline-and-indent)

;; Indentation and cleanup
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)

;; (setq-default show-trailing-whitespace t)

;; cnc-command
(defun visible-buffers ()
  "Definition"
  (interactive)
  (mapcar '(lambda (window) (buffer-name (window-buffer window))) (window-list)))

(defun all-buffers-except-this ()
  "Definition"
  (interactive)
  (delete (buffer-name (current-buffer)) (visible-buffers))
  )

(defun cnc-from-file ()
  "A command to run commands on the other open buffers"
  (interactive)
  (dolist (elt (all-buffers-except-this))
    (comint-send-string elt (format "%s\n" (thing-at-point `line))))
  (next-line)
  t
  )

(defun cnc-prompt (cmd)
  "A command to run commands on the other open buffers"
  (interactive "sCmd: ")
  (dolist (elt (visible-buffers))
    (comint-send-string elt (format "%s\n" cmd)))
  )

(global-set-key (kbd "C-c y") `cnc-prompt)
(global-set-key (kbd "C-c C-.") `cnc-from-file)

(setq projectile-mode-line "Projectile")
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; Winner Mode

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I sometimes still use C-x r w <register> to store a window configuration in a register,           ;;
;; and C-x r j <register> (where <register> is a single character) to jump back to it.               ;;
;; While this is a nice way for storing a few window configurations which you want to go             ;;
;; back to after some time, I find winner-mode to be more convenient in a few regards.               ;;
;; (For example, you won't have to bother naming the configurations).                                ;;
;; Just put (winner-mode 1) in your .emacs, bind winner-undo and winner-redo to convenient shortcuts ;;
;; (or use the IMHO awkward C-c <left> and C-c <right> predefined ones)                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(winner-mode 1)

;; LaTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)



;;Does this fix long-lines?
(add-hook 'visual-line-mode-hook 'visual-fill-column-mode)

;; Remote ansi-term
;; Use this for remote so I can specify command line arguments
(defun remote-term (new-buffer-name cmd &rest switches)
  (setq term-ansi-buffer-name (concat "*" new-buffer-name "*"))
  (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
  (setq term-ansi-buffer-name (apply 'make-term term-ansi-buffer-name cmd nil switches))
  (set-buffer term-ansi-buffer-name)
  (term-mode)
  (term-char-mode)
;;  (term-set-escape-char ?\C-x)
  (switch-to-buffer term-ansi-buffer-name))

;; Use plink on windows
(with-system windows-nt
  (message "this is a windows system! I know this")
  (require 'tramp)
  (set-default 'tramp-default-method "plink"))

;; Easy window splitting
(defun split-maj-min (number)
(interactive "N")
"Function to split windows into one major window and multiple minor windows"
(split-window-horizontally)
(other-window 1)
(while (> number 1)
  (setq number (+ -1 number))
  (split-window-vertically))
(balance-windows))

(defun split-cnc (number)
(interactive "N")
"Function to split windows into one major window and multiple minor ansi-terms"
(split-window-horizontally)
(other-window 1)
(ansi-term "/bin/bash" "cnc")
(while (> number 1)
  (split-window-vertically)
  (ansi-term "/bin/bash" "cnc")
  (other-window 1)
  (setq number (+ -1 number)))
(ansi-term "/bin/bash" "cnc")
(other-window 1)
(balance-windows))

;; Move backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; no vc in tramp
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
	      vc-ignore-dir-regexp
	      tramp-file-name-regexp))

;; Turn of scrollbars
(scroll-bar-mode -1)
(getenv "PATH")
;; Dumb Jump
(global-set-key (kbd "C-c l") 'helm-projectile-switch-to-buffer)

(global-set-key (kbd "C-c <left>") 'dumb-jump-back)
(global-set-key (kbd "C-c <right>") 'dumb-jump-go)
(global-set-key (kbd "C-c <down>") 'dumb-jump-quick-look)
(global-set-key (kbd "C-2") 'helm-mini)
(global-set-key (kbd "C-x j") 'kill-this-buffer)
(global-set-key (kbd "ESC M-RET") 'browse-url-firefox)


(setq helm-mini-default-sources 
      '(helm-source-buffers-list 
        helm-source-bookmarks 
        helm-source-recentf 
        helm-source-buffer-not-found))

(add-to-list 'load-path "/path/to/es-mode-dir")
(autoload 'es-mode "es-mode.el"
            "Major mode for editing Elasticsearch queries" t)
(add-to-list 'auto-mode-alist '("\\.es$" . es-mode))
(setq inhibit-startup-message t)

;; w3m
(defun ffap-w3m-other-window (url &optional new-session)
  "Browse url in w3m.
  If current frame has only one window, create a new window and browse the webpage"
  (interactive (progn
                 (require 'browse-url)
                 (browse-url-interactive-arg "Emacs-w3m URL: ")))
  (let ((w3m-pop-up-windows t))
    (if (one-window-p) (split-window))
    (other-window 1)
    (w3m-goto-url-new-session url new-session)
    (other-window 1)))

;; (setq browse-url-browser-function 'ffap-w3m-other-window)
(setq browse-url-browser-function 'browse-url-firefox)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; optional keyboard short-cut
(global-set-key "\C-xm" 'browse-url-at-point)
(setq w3m-use-cookies t)

(defun rand-w3m-view-this-url-background-session ()
  (interactive)
  (let ((in-background-state w3m-new-session-in-background))
    (setq w3m-new-session-in-background t)
    (w3m-view-this-url-new-session)
    (setq w3m-new-session-in-background in-background-state)))

(defun my-w3m-bindings ()
  (define-key w3m-mode-map (kbd "C-<return>") 'rand-w3m-view-this-url-background-session))

(add-hook 'w3m-mode-hook 'my-w3m-bindings)
(setq x-select-enable-clipboard t)
(setq x-select-enable-primary t)


;; Gmail
(setq user-mail-address "noonker@pm.me"
      user-full-name "Joshua Person")

(setq gnus-select-method '(nnimap "127.0.0.1"
                                  (nnimap-address "127.0.0.1")
                                  (nnimap-server-port 1143)
				  (nnimap-stream starttls)))


(add-to-list 'gnus-secondary-select-methods
             '(nnimap "work"
                      (nnimap-address "outlook.office365.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      ))

(setq mail-sources '((imap :server "127.0.0.1"
                            :user "noonker@pm.me"
			   )))

(setq tls-program
      '("gnutls-cli --insecure -p %p %h"
      "gnutls-cli --insecure -p %p %h --protocols ssl3"
      "openssl s_client -connect %h:%p -no_ssl2 -ign_eof"))

(gnus-demon-add-handler 'gnus-group-get-new-news 60 nil)

;; Alert with notifications for new mail
(require 'gnus-desktop-notify)
(gnus-desktop-notify-mode)
(gnus-demon-add-scanmail)

;; SMTP settings loving lifted from http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html
;; Now lets configure smtpmail.el with your name and functions to send;; mail using your smtp accounts by changing the from field
(require 'smtpmail)
(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      mail-from-style nil user-full-name "Joshua Person"
      smtpmail-debug-info t smtpmail-debug-verb t)

(defun set-smtp (mech server port user password)
  "Set related SMTP variables for supplied parameters."
  (setq smtpmail-smtp-server server smtpmail-smtp-service port
	smtpmail-auth-credentials (list (list server port user
					      password)) smtpmail-auth-supported (list mech)
					      smtpmail-starttls-credentials nil)
  (message "Setting SMTP server to `%s:%s' for user `%s'."
	   server port user))

(defun set-smtp-ssl (server port user password &optional key
			    cert)
  "Set related SMTP and SSL variables for supplied parameters."
  (setq starttls-use-gnutls t
	starttls-gnutls-program "gnutls-cli"
	starttls-extra-arguments nil smtpmail-smtp-server server
	smtpmail-smtp-service port
	smtpmail-auth-credentials (list (list server port user
					      password)) smtpmail-starttls-credentials (list (list
											      server port key cert)))
  (message
   "Setting SMTP server to `%s:%s' for user `%s'. (SSL
enabled.)" server port user))

(defun change-smtp ()
  "Change the SMTP server according to the current from line."
  (save-excursion
    (loop with from = (save-restriction
			(message-narrow-to-headers)
			(message-fetch-field "from"))
	  for (auth-mech address . auth-spec) in smtp-accounts
	  when (string-match address from) do (cond
					       ((memq auth-mech '(cram-md5 plain login))
						(return (apply 'set-smtp (cons auth-mech auth-spec))))
					       ((eql auth-mech 'ssl)
						(return (apply 'set-smtp-ssl auth-spec)))
					       (t (error "Unrecognized SMTP auth. mechanism:
`%s'." auth-mech))) finally (error "Cannot infer SMTP
information."))))

;; The previous function will complain if you fill the from field with;; an account not present in smtp-accounts.
(defvar %smtpmail-via-smtp (symbol-function 'smtpmail-via-smtp))

(defun smtpmail-via-smtp (recipient smtpmail-text-buffer)
  (with-current-buffer smtpmail-text-buffer
    (change-smtp))
  (funcall (symbol-value '%smtpmail-via-smtp) recipient
	   smtpmail-text-buffer))

(setq mail-user-agent 'gnus-user-agent)

(defun todo (text &optional body)
  (interactive "sTodo: ")
  (compose-mail-other-window "noonker@pm.me" text)
  (mail-text)
  (if body
      (insert body))
  (message-send-and-exit)
  )

;; ipython fix
;; (setq python-shell-interpreter "ipython"
;;    python-shell-interpreter-args "--simple-prompt -i")

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)

;; Google chrome as default browser
;; (setq browse-url-browser-function 'eww)
(setq browse-url-browser-function 'browse-url-default-browser)

;; Temporarily maximize buffers
(defun toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
    (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))

;; Bind it to a key.
(global-set-key [(super shift return)] 'toggle-maximize-buffer)

;; Neotree
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; Insert date
(defun insert-current-date () (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

;; Start hangups
(defun hangups ()
  (interactive)
  (ansi-term "hangups" "hangups"))

;; Start tmux
(defun tmux()
  (interactive)
  (ansi-term "tmux" "tmux"))

;; Start Selenium
(defun selenium()
  (interactive)
  (save-excursion
    (async-shell-command "java -jar $HOME/Documents/selenium.jar")))

;; Start Selenium
(defun mopidy()
  (interactive)
  (save-excursion
    (ansi-term "mopidy" "mopidy")))

;; No menus by default
(tool-bar-mode -1)
(menu-bar-mode -1)

(setq wttrin-default-accept-language '("Accept-Language" . "en-US"))
(setq wttrin-default-cities '("Ann Arbor" "Escanaba"))

(defun passc ()
  "Copy the password of the entry in the current buffer."
  (interactive)
    (helm-find-files-1 "~/.password-store/Internet")
    (goto-char (point-min))
    (copy-region-as-kill (point) (line-end-position))
    (kill-this-buffer))

(defun ruthless-kill ()
  "Kill the line without copying it"
  (interactive)
  (delete-region (point) (line-end-position)))

(global-set-key (kbd "C-c k") 'ruthless-kill)
(global-set-key (kbd "M-S") 'slack-select-rooms)

(setq erc-hide-list '("JOIN" "PART" "QUIT"))

;; Company Mode shit
(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0.3)
(setq company-minimum-prefix-length 2)

(defun complete-or-indent ()
  (interactive)
  (if (company-manual-begin)
      (company-complete-common)
    (indent-according-to-mode)))

(defun indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))

(setq helm-exit-idle-delay 0)
(defun dark()
  (interactive)
  (load-theme 'solarized-dark t)
  )

(defun light()
  (interactive)
  (load-theme 'solarized-light t)
  )


;;; Big QOL changes.
(setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
(setq slack-buffer-function #'switch-to-buffer)
(setq slack-prefer-current-team t)
(setq slack-display-team-name nil)
(add-hook 'slack-mode-hook #'emojify-mode)
(setq slack-buffer-create-on-notify t)
;; (setq alert-default-style 'mode-line)
(setq alert-default-style 'notifications)

(defun slack-user-status (_id _team) "")
;;; Channels
(setq slack-message-notification-title-format-function
      (lambda (_team room threadp)
        (concat (if threadp "Thread in #%s") room)))

(defun endless/-cleanup-room-name (room-name)
  "Make group-chat names a bit more human-readable."
  (replace-regexp-in-string
   "--" " "
   (replace-regexp-in-string "#mpdm-" "" room-name)))

;;; Private messages and group chats
(setq
 slack-message-im-notification-title-format-function
 (lambda (_team room threadp)
   (concat (if threadp "Thread in %s")
           (endless/-cleanup-room-name room))))

(defun slk ()
  "start slack"
  (interactive)
  (slack-start)
  (cl-defmethod slack-buffer-name ((_class (subclass slack-room-buffer)) room team)
    (slack-if-let* ((room-name (slack-room-name room team)))
	(format  ":%s"
		 room-name)))
  (slack-change-current-team)
)

(require 'emms-setup)
(require 'emms-streams)
(require 'emms-stream-info)

;; EMMS Streams
(setq emms-stream-default-list
      (append
       '(("SomaFM: Dubstep" "http://somafm.com/dubstep130.pls" 1 streamlist)
	 ("SomaFM: Goa" "http://somafm.com/suburbsofgoa130.pls" 1 streamlist)
	 ("SomaDM: The Trip" "http://somafm.com/thetrip130.pls" 1 streamlist)
	 ("SomaDM: Boot Liquor" "http://somafm.com/bootliquor130.pls" 1 streamlist)
	 ("SomaDM: Digitails" "http://somafm.com/digitalis130.pls" 1 streamlist)
	 ("SomaDM: Space" "http://somafm.com/spacestation130.pls" 1 streamlist)
	 ("SomaDM: Bagel" "http://somafm.com/bagel130.pls" 1 streamlist)
	 ("SomaDM: Soul" "http://somafm.com/7soul130.pls" 1 streamlist)
	 ("SomaDM: Folk" "http://somafm.com/folkfwd130.pls" 1 streamlist)
	 ("SomaDM: IDM" "http://somafm.com/cliqhop130.pls" 1 streamlist)
	 ("SomaDM: Lush" "http://somafm.com/lush130.pls" 1 streamlist)
	 ("SomaDM: SF1033" "http://somafm.com/sf1033130.pls" 1 streamlist)
	 ("SomaDM: DS1" "http://somafm.com/deepspaceone130.pls" 1 streamlist)
	 ("SomaDM: Jazz" "http://somafm.com/sonicuniverse130.pls" 1 streamlist))
       ;;emms-stream-default-list
       ))  

 (setq emms-directory "~/org/emms"
	emms-stream-default-action "play"
	emms-stream-info-backend 'mplayer
	emms-stream-bookmarks-file "~/org/emms/streams"
	emms-mode-line-format " 𝄞 " )

(require 'emms-mode-line-icon)

;; (emms-mode-line-cycle 1)

 (emms-minimalistic)
 (emms-default-players)
 (emms-mode-line-enable)

 (advice-add 'emms-stream-info-mplayer-backend
	      :override
	      (lambda (url)
		"The original function isn't working, using this temporarily until I figure it out."
		(condition-case excep
		    (call-process "mplayer" nil t nil
				  "-msglevel" "decaudio=-1:cache=-1:statusline=-1:cplayer=-1" "-cache" "180"
				  "-endpos" "0" "-vo" "null" "-ao" "null" "-playlist"
				  url)
		  (file-error
		   (error "Could not find the mplayer backend binary")))))

(setq inferior-lisp-program "/usr/local/bin/sbcl")
(setq slime-contribs '(slime-fancy))

(defun yt-dl-it (url)
  "Downloads the URL in an async shell"
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "youtube-dl %s" url))))

(require 'elfeed)
(defun elfeed-mail-todo (&optional use-generic-p)
  "Mail this to myself for later reading"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-title entry)
             do (todo it (elfeed-entry-link entry)))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-eww-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-firefox-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (browse-url-firefox it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-w3m-open (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (ffap-w3m-other-window it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-youtube-dl (&optional use-generic-p)
  "open with eww"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (yt-dl-it it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(define-key elfeed-search-mode-map (kbd "m") 'elfeed-mail-todo)
(define-key elfeed-search-mode-map (kbd "t") 'elfeed-w3m-open)
(define-key elfeed-search-mode-map (kbd "w") 'elfeed-eww-open)
(define-key elfeed-search-mode-map (kbd "f") 'elfeed-firefox-open)
(define-key elfeed-search-mode-map (kbd "d") 'elfeed-youtube-dl)



(setq org-jira-jira-status-to-org-keyword-alist
       '(("IN PROGRESS" . "INPROGRESS")
         ("TO DO" . "TODO")
         ("DONE" . "DONE")))
;;(setq org-log-done 'time)

(setq processing-location "/usr/local/bin/processing-java")
(setq processing-application-dir "/Applications/Processing.app")
(setq processing-sketchbook-dir "~/Documents/Processing")


(global-set-key (kbd "C-'") 'ace-window)

(defun processing-mode-init ()
  (make-local-variable 'ac-sources)
  (setq ac-sources '(ac-source-dictionary ac-source-yasnippet))
  (make-local-variable 'ac-user-dictionary)
  (setq ac-user-dictionary (append processing-functions
                                   processing-builtins
                                   processing-constants)))

(add-to-list 'ac-modes 'processing-mode)
(add-hook 'processing-mode-hook 'processing-mode-init)

;; C/C++ & PlatformIO Mode:
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; Add the required company backend.
(add-to-list 'company-backends 'company-irony)

;; Enable irony for all c++ files, and platformio-mode only
;; when needed (platformio.ini present in project root).
(add-hook 'c++-mode-hook (lambda ()
                           (irony-mode)
                           (irony-eldoc)
                           (platformio-conditionally-enable)))

;; Use irony's completion functions.
(add-hook 'irony-mode-hook
          (lambda ()
            (define-key irony-mode-map [remap completion-at-point]
              'irony-completion-at-point-async)

            (define-key irony-mode-map [remap complete-symbol]
              'irony-completion-at-point-async)

            (irony-cdb-autosetup-compile-options)))

;; Setup irony for flycheck.
(add-hook 'flycheck-mode-hook 'flycheck-irony-setup)

(global-set-key (kbd "<f9>") 'spray-mode)
(global-set-key (kbd "<f12>") 'helm-pass)

(setq reb-re-syntax 'string)
(global-set-key (kbd "C-s-c C-s-c") 'mc/edit-lines)
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(global-prettify-symbols-mode +1)
(setq org-startup-align-all-table t)

(defun image-to-text ()
  (interactive)
  (if buffer-file-name
    (progn
      ;; Convert the file to a tif file for tesseract consumption.
      (shell-command (concat "convert " buffer-file-name " -resize 400% -type Grayscale " buffer-file-name ".tif"))
      ;; Convert the file from tif to txt using tesseract.
      (shell-command (concat "tesseract -l eng " buffer-file-name ".tif " buffer-file-name))
      ;; Delete the tif file artifact.
      (shell-command (concat "rm " buffer-file-name ".tif"))
      ;; Open the text file in buffer, this should be the text found in the image converted.
      (find-file (concat buffer-file-name ".txt")))))


(with-eval-after-load 'twittering-mode 
  (defun *twittering-generate-format-table (status-sym prefix-sym)
    `(("%" . "%")
      ("}" . "}")
      ("#" . (cdr (assq 'id ,status-sym)))
      ("'" . (when (cdr (assq 'truncated ,status-sym))
               "..."))
      ("c" .
       (let ((system-time-locale "C"))
         (format-time-string "%a %b %d %H:%M:%S %z %Y"
                             (cdr (assq 'created-at ,status-sym)))))
      ("d" . (cdr (assq 'user-description ,status-sym)))
      ("f" .
       (twittering-make-string-with-source-property
        (cdr (assq 'source ,status-sym)) ,status-sym))
      ("i" .
       (when (and twittering-icon-mode window-system)
         (let ((url
                (cond
                 ((and twittering-use-profile-image-api
                       (eq twittering-service-method 'twitter)
                       (or (null twittering-convert-fix-size)
                           (member twittering-convert-fix-size '(48 73))))
                  (let ((user (cdr (assq 'user-screen-name ,status-sym)))
                        (size
                         (if (or (null twittering-convert-fix-size)
                                 (= 48 twittering-convert-fix-size))
                             "normal"
                           "bigger")))
                    (format "http://%s/%s/%s.xml?size=%s" twittering-api-host
                            (twittering-api-path "users/profile_image") user size)))
                 (t
                  (cdr (assq 'user-profile-image-url ,status-sym))))))
           (twittering-make-icon-string nil nil url))))
      ("I" .
       (let* ((entities (cdr (assq 'entity ,status-sym)))
              text)
         (mapc (lambda (url-info)
                 (setq text (or (cdr (assq 'media-url url-info)) "")))
               (cdr (assq 'media entities)))
         (if (string-equal "" text)
             text
           (let ((twittering-convert-fix-size 360))
             (twittering-make-icon-string nil nil text)))))
      ("j" . (cdr (assq 'user-id ,status-sym)))
      ("L" .
       (let ((location (or (cdr (assq 'user-location ,status-sym)) "")))
         (unless (string= "" location)
           (concat " [" location "]"))))
      ("l" . (cdr (assq 'user-location ,status-sym)))
      ("p" . (when (cdr (assq 'user-protected ,status-sym))
               "[x]"))
      ("r" .
       (let ((reply-id (or (cdr (assq 'in-reply-to-status-id ,status-sym)) ""))
             (reply-name (or (cdr (assq 'in-reply-to-screen-name ,status-sym))
                             ""))
             (recipient-screen-name
              (cdr (assq 'recipient-screen-name ,status-sym))))
         (let* ((pair
                 (cond
                  (recipient-screen-name
                   (cons (format "sent to %s" recipient-screen-name)
                         (twittering-get-status-url recipient-screen-name)))
                  ((and (not (string= "" reply-id))
                        (not (string= "" reply-name)))
                   (cons (format "in reply to %s" reply-name)
                         (twittering-get-status-url reply-name reply-id)))
                  (t nil)))
                (str (car pair))
                (url (cdr pair))
                (properties
                 (list 'mouse-face 'highlight 'face 'twittering-uri-face
                       'keymap twittering-mode-on-uri-map
                       'uri url
                       'front-sticky nil
                       'rear-nonsticky t)))
           (when (and str url)
             (concat " " (apply 'propertize str properties))))))
      ("R" .
       (let ((retweeted-by
              (or (cdr (assq 'retweeting-user-screen-name ,status-sym)) "")))
         (unless (string= "" retweeted-by)
           (concat " (retweeted by " retweeted-by ")"))))
      ("S" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-name ,status-sym)) ,status-sym))
      ("s" .
       (twittering-make-string-with-user-name-property
        (cdr (assq 'user-screen-name ,status-sym)) ,status-sym))
      ("U" .
       (twittering-make-fontified-tweet-unwound ,status-sym))
      ;; ("D" .
      ;;  (twittering-make-fontified-tweet-unwound ,status-sym))
      ("T" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("t" .
       ,(twittering-make-fontified-tweet-text
         `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
         twittering-regexp-hash twittering-regexp-atmark))
      ("u" . (cdr (assq 'user-url ,status-sym)))))
  (advice-add #'twittering-generate-format-table :override #'*twittering-generate-format-table)
  (defface twitter-divider
    `((t (:underline (:color "grey"))))
    "The vertical divider between tweets."
    :group 'twittering-mode)
  (setq twittering-icon-mode t
        twittering-use-icon-storage t
        twittering-convert-fix-size 40
        twittering-status-format "
  %i  %FACE[font-lock-function-name-face]{  @%s}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}}

%FOLD[   ]{%FILL{%t}
%QT{
%FOLD[   ]{%FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[ ]{%FILL{%t}}
}}}

    %I

%FACE[twitter-divider]{                                                                                                                                                                                  }
"))

(autoload 'enable-paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)
(add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
(add-hook 'lisp-mode-hook             'enable-paredit-mode)
(add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
(add-hook 'scheme-mode-hook           'enable-paredit-mode)

(defun character-below ()
  (save-excursion
    (next-line)
    (string (char-after (point)))))


(defun replace-below (cur rep bel)
  (interactive)
  (let ((pos 1)
	(tmp))
    (while (< pos (point-max))
      (if (equal cur (string (char-after pos)))
	  (if (equal bel (character-above))
	      (progn (delete-char 1) (insert rep))
	      ))
      (setq pos (+ 1 pos))
      (goto-char pos)
    )))

(add-hook 'prog-mode-hook
            (lambda ()
              (push '("<=" . ?≤) prettify-symbols-alist)
	      (push '(">=" . ?≥) prettify-symbols-alist)
	      (push '("map" . ?↦) prettify-symbols-alist)
	      (push '("!=" . ?≠) prettify-symbols-alist)
	      (push '("==" . ?≡) prettify-symbols-alist)
	      (push '("None" . ?Ø) prettify-symbols-alist)
	      (push '("->" . ?→) prettify-symbols-alist)
	      (push '("<-" . ?←) prettify-symbols-alist)
	      (push '("->>" . ?⇉) prettify-symbols-alist)
	      (push '("not" . ?¬) prettify-symbols-alist)
	      (push '("union" . ?⋃) prettify-symbols-alist)
	      (push '("intersection" . ?⋂) prettify-symbols-alist)
	      ))

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (push '("let" . ?⊢) prettify-symbols-alist)
	    (push '("defn" . ?ƒ) prettify-symbols-alist)
	    (push '("fn" . ?λ) prettify-symbols-alist)
	    (push '("doseq" . ?∀) prettify-symbols-alist)
	    (push '("comp" . ?∘) prettify-symbols-alist)
	    (push '("partial" . ?Ƥ) prettify-symbols-alist)
	    (push '("not=" . ?≠) prettify-symbols-alist)
	    ))

(add-hook 'org-mode-hook
	  (lambda ()
	    (push '("#+begin_src" . "ƒ") prettify-symbols-alist)
	    (push '("#+end_src" . "\\ƒ") prettify-symbols-alist)
	    (push '("#+BEGIN_SRC" . "ƒ") prettify-symbols-alist)
	    (push '("#+END_SRC" . "\\ƒ") prettify-symbols-alist)
	    (push '("#+begin_quote" . "「") prettify-symbols-alist)
	    (push '("#+BEGIN_QUOTE" . "「") prettify-symbols-alist)
	    (push '("#+end_quote" . "」") prettify-symbols-alist)
	    (push '("#+END_QUOTE" . "」") prettify-symbols-alist)
	    ))

(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))


(defun what-is-my-ip ()
  (interactive)
  (message "IP: %s"
           (with-current-buffer (url-retrieve-synchronously "https://api.ipify.org")
             (buffer-substring (+ 1 url-http-end-of-headers) (point-max)))))

(setq visible-bell 1)


;; Eshell
(defun git-prompt-eshell ()
  "Git a git prompt"
 (let (beg dir git-branch git-dirty end)
   (if (eshell-git-prompt--git-root-dir)
       (progn
	 (setq eshell-git-prompt-branch-name (eshell-git-prompt--branch-name))
	 (setq git-branch
	       (concat
		(with-face "git:(" 'eshell-git-prompt-robyrussell-git-face)
		(with-face (eshell-git-prompt--readable-branch-name) 'eshell-git-prompt-robyrussell-branch-face)
		(with-face ")" 'eshell-git-prompt-robyrussell-git-face)))
	 (setq git-dirty
	       (when (eshell-git-prompt--collect-status)
		 (with-face "✗" 'eshell-git-prompt-robyrussell-git-dirty-face)))
	 (concat git-branch git-dirty)) "☭" )))

(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face 'org-level-4)
         (propertize (user-login-name) 'face 'org-level-1)
         (propertize "@" 'face 'org-level-4)
         (propertize (system-name) 'face 'org-level-3)
         (propertize "]──[" 'face 'org-level-4)
         (propertize (format-time-string "%H:%M" (current-time)) 'face 'org-level-2)
         (propertize "]──[" 'face 'org-level-4)
         (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
	 (propertize "]──[" 'face 'org-level-4)
	 (propertize (git-prompt-eshell) 'face 'org-level-6)
         (propertize "]\n" 'face 'org-level-4)
         (propertize "└─>" 'face 'org-level-4)
         (propertize (if (= (user-uid) 0) " # " " $ ") 'face 'org-level-4)
         )))

(setq eshell-visual-commands '("htop" "vi" "screen" "top" "less"
                               "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
                               "vim"))

(setq eshell-visual-subcommands '("git" "log" "diff" "show" "ssh"))

(setenv "PAGER" "cat")

(defalias 'ff 'find-file)
(defalias 'd 'dired)

(defun eshell/clear ()
  (let ((inhibit-read-only t))
    (erase-buffer)))

(defun eshell/gst (&rest args)
    (magit-status (pop args) nil)
    (eshell/echo))   ;; The echo command suppresses output

(defun rand-w3m-view-this-url-background-session ()
  (interactive)
  (let ((in-background-state w3m-new-session-in-background))
    (setq w3m-new-session-in-background t)
    (w3m-view-this-url-new-session)
    (setq w3m-new-session-in-background in-background-state)))

(defun my-w3m-bindings ()
  (define-key w3m-mode-map (kbd "C-<return>") 'rand-w3m-view-this-url-background-session))

(add-hook 'w3m-mode-hook 'my-w3m-bindings)


;; (when (eq system-type 'darwin)
(setf epa-pinentry-mode 'loopback)
(set-face-attribute 'default nil :family "Monoid" :height 100)
;;)

;; Org Mode Stuff
(setq org-clock-in-switch-to-state "IN-PROGRESS")
(setq org-clock-out-switch-to-state "TODO")
(setq org-agenda-basedir "~/git/stuff/org")
(setq org-refile-allow-creating-parent-nodes t)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)

(defun  org-init-agenda ()
  (interactive)
  (let ((initial '(("backlog.org" nil)
                   ("recurring.org" nil)
		   ("today.org" nil)
		   ("projects" t)
		   ("archive" t)))
        (todostr "#+TODO: TODO IN-PROGRESS | DONE WONTDO"))
    (if (not (file-directory-p org-agenda-basedir)) 
      (make-directory org-agenda-basedir))

    (dolist (element initial) 
      (let ((name  (nth 0 element))
            (isdir (nth 1 element)))
        ;; If the file doesn't exist and not flagged as dir
        (if (and (not isdir)
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
          (write-region todostr nil (format "%s/%s" org-agenda-basedir name)))

        ;; If the file doesn't exist and is flagged as dir
        (if (and isdir
                 (not (file-directory-p (format "%s/%s" org-agenda-basedir name))))
          (make-directory (format "%s/%s" org-agenda-basedir name)))))))


(setq org-agenda-files (append (list (format "%s/backlog.org" org-agenda-basedir)
				     (format "%s/recurring.org" org-agenda-basedir)
				     (format "%s/today.org" org-agenda-basedir))
			       (directory-files-recursively (format "%s/projects/" org-agenda-basedir) "^[0-9a-zA-Z\-_]*?\.org$")
			       ))

(setq org-archive-location (format "%s/archive/%s.org::" org-agenda-basedir (format-time-string "%Y-%m-%d")))

(setq org-capture-templates
      '(("b" "Backlog" entry (file+headline (lambda () (format "%s/backlog.org" org-agenda-basedir)) "Backlog")
         "** TODO %?\n  %i\n  %a")
        ("t" "Today" entry (file+headline (lambda () (format "%s/today.org" org-agenda-basedir)) "Tasks")
         "** TODO %?\n SCHEDULED: %t")))

(defun org-agenda-new-day ()
       (interactive)
       (with-current-buffer (find-file (format "%s/today.org" org-agenda-basedir))
	 (mark-whole-buffer)
	 (kill-region (mark) (point))
	 (if (= (buffer-size) 0) (insert "#+TODO: TODO IN-PROGRESS | DONE WONTDO\n\n* Tasks\n* Thoughts\n")))
(org-agenda))

(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling

(defun org-complex-tasks ()
  (interactive)
  (let ((tasks  (quote ("TODO Create Jira Ticket" 
                        "TODO Documentation"
                        "TODO Close Jira Ticket"))))
    (org-end-of-line)
    (insert " [/]")
    (org-insert-heading)
    (org-demote-subtree)
    (insert (car tasks))
    (dolist (element (cdr tasks))
      (org-insert-heading)      
      (insert element))))

(defun set-complex ()
  (interactive "P")
  (let ((marker (or (org-get-at-bol 'org-hd-marker)
                    (org-agenda-error))))
    (org-with-point-at marker
      (org-back-to-heading t)
      (org-complex-tasks))))

(defun org-agenda-copy ()
  (interactive "P")
  (let ((marker (or (org-get-at-bol 'org-hd-marker)
                    (org-agenda-error))))
    (org-with-point-at marker
      (org-back-to-heading t)
      (org-copy))))

(defun kill-matching-org-clocks ()
  (save-window-excursion
    (save-excursion
    (find-file (format "%s/today.org" org-agenda-basedir))
    (beginning-of-buffer)
    (while (< (point) (point-max))
      (search-forward "CLOCK: [" ) ;; Get rid of this error at some point 
      (if (string-match-p (format-time-string "%Y-%m-%d") (thing-at-point 'line t))
	  (progn (beginning-of-line) (kill-line) (kill-line))))
    )))

(defun org-janky-copy ()
  (interactive "P")
  (let ((marker (or (org-get-at-bol 'org-hd-marker)
                    (org-agenda-error))))
    (org-with-point-at marker
      (org-back-to-heading t)
      (message (format "%s - point "(point)))
      (message (format "%s - marker" marker))
      (org-refile 3 nil (list "Tasks" (format "%s/today.org" org-agenda-basedir) nil (save-window-excursion
  (save-excursion
  (find-file (format "%s/today.org" org-agenda-basedir))
   (org-find-exact-headline-in-buffer "Tasks")))) "Copy")
      (kill-matching-org-clocks)
      )))

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(setq notmuch-search-oldest-first nil)

(defun fish-term ()
  (interactive)
  (comint-send-string (vterm "fish") "fish\nclear\n"))

;; C Dev
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(setq
 helm-gtags-ignore-case t
 helm-gtags-auto-update t
 helm-gtags-use-input-at-cursor t
 helm-gtags-pulse-at-cursor t
 helm-gtags-prefix-key "\C-cg"
 helm-gtags-suggested-key-mapping t
 )

(require 'helm-gtags)
;; Enable helm-gtags-mode
(add-hook 'dired-mode-hook 'helm-gtags-mode)
(add-hook 'eshell-mode-hook 'helm-gtags-mode)
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
(define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
(define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
(define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
(define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
(define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)

(setq-local imenu-create-index-function #'ggtags-build-imenu-index)

(add-to-list 'company-backends 'company-c-headers)

(save-window-excursion
  (save-excursion
  (find-file (format "%s/today.org" org-agenda-basedir))
   (org-find-exact-headline-in-buffer "Tasks")))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 111 :family "Hack")))))

(defun no-fonts-pls ()
  (interactive)
  (let ((inhibit-read-only t))
   (set-text-properties (point-min) (point-max) nil)))

(load-theme 'cyberpunk t)
