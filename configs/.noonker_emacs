;;; .emacs -- WIP emacs configuration
;-*-Emacs-Lisp-*-

;;; Commentary:
;;
;; I'm just here so I won't get fined
;; Hey future josh, here's a debugging statement for ya
;; (setq debug-on-error t)
;; (setq request-message-level 'debug)
;; (setq request-log-level 'debug)

;;
;;; Code:

;; Set up repos and ensure desired files are installed
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)
(package-initialize)

(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

;; Set exec-path
;; (when (memq window-system '(mac ns x))
;;  (exec-path-from-shell-initialize))

;; Assuming you wish to install "iedit" and "magit"
(ensure-package-installed 'iedit
                          'magit
                          'flycheck
                          'helm
                          '2048-game
                          'projectile
                          'helm-projectile
                          'helm-google
                          'org
                          'org-plus-contrib
                          'org-jira
                          'helm-ag
                          'company
                          'autopair
                          'wttrin
                          'dumb-jump
                          'confluence
                          'es-mode
                          'restclient
                          'exec-path-from-shell
                          'monokai-theme
                          'excorporate
                          'hackernews
                          'xclip
                          'mediawiki
                          'erc-colorize
                          'mingus
                          'emojify
                          'minimap
                          'request
                          'adaptive-wrap
                          'multiple-cursors
                          'isend-mode
                          'pcap-mode
                          'ace-popup-menu
                          'ipcalc
                          'neotree
                          'all-the-icons
                          'rainbow-delimiters
                          'rainbow-mode
                          'nyan-mode
                          'ace-jump-mode
                          'jenkins
                          'helm
                          'smartscan
                          'minesweeper
                          'auctex
                          'howdoi
                          'docker
                          'magithub
                          'speed-type
                          'latex-preview-pane
                          'js-comint
                          'beacon
                          'spray
                          'powershell
                          'helm-pass
                          'undo-tree
                          'elfeed
                          'twittering-mode
                          'eshell-git-prompt
                          'ein
                          'flymd
                          'pdf-tools
                          'sx
                          'system-packages
                          'fish-completion
                          'easy-hugo
                          'slack
                          'ssh
                          'google-translate
                          'gnuplot
                          'gnuplot-mode
                          'smtpmail-multi
                          'gnus-desktop-notify
                          'free-keys
                          'yara-mode
                          'csv-mode
                          'emms
			  'color-theme-sanityinc-tomorrow
                          )


(require 'ssh)
(add-hook 'ssh-mode-hook
	  (lambda ()
	    (setq ssh-directory-tracking-mode t)
	    (shell-dirtrack-mode t)
	    (setq dirtrackp nil)))


(require 'cl)
(add-hook 'python-mode-hook
          (lambda ()
            (outline-minor-mode)
))

;; exwm trial 2
(add-to-list 'load-path "$HOME/git/xelb/")
(add-to-list 'load-path "$HOME/git/exwm/")

;; (require 'exwm)
;; (require 'exwm-config)
;; (exwm-config-default)

;; (defun switch-to-last-buffer ()
;;   "Switch to last open buffer in current window."
;;   (interactive)
;;   (switch-to-buffer (other-buffer (current-buffer) 1)))

;; (exwm-input-set-key (kbd "s-<tab>") #'switch-to-last-buffer)

;; (require 'exwm-systemtray)
;; (exwm-systemtray-enable)
;; (setq exwm-systemtray-height 24)
(require 'epg-config)
(setenv "QUBES_GPG_DOMAIN" "gpg-server")
(customize-set-variable 'epg-gpg-program "/usr/bin/qubes-gpg-client-wrapper")
(push (cons 'OpenPGP (epg-config--make-gpg-configuration epg-gpg-program))
      epg--configurations)
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))


;;(require 'emms-setup)
;;(emms-all)
;; (emms-default-players)

;;(evil-mode t)
(global-flycheck-mode)
;;(global-linum-mode t)
;;(powerline-default-theme)
(global-company-mode)

;; Python iPython
(setq
 python-shell-interpreter "ipython"
 python-shell-interpreter-args "--colors=Linux --profile=default"
 python-shell-prompt-regexp "In \\[[0-9]+\\]: "
 python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
 python-shell-completion-setup-code
 "from IPython.core.completerlib import module_completion"
 python-shell-completion-module-string-code
 "';'.join(module_completion('''%s'''))\n"
 python-shell-completion-string-code
 "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
;; IPython autoreloading && debugging registers
(set-register ?d '"import pdb\npdb.set_trace()")
(set-register ?r '"%load_ext autoreload\n%autoreload 2")
(set-register ?e '"sudo docker run -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:6.3.2 -v \"$PWD/config\":/usr/share/elasticsearch/config")
(set-register ?p '"\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)")
(set-register ?o '"\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}")
(set-register ?i '"\\(\\(\\([0-9]\\{1,3\\}\\(\\.\\|\\[\\.\\]\\)\\)\\{3\\}[0-9]\\{1,3\\}\\)\\|\\([a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)\\)*[a-zA-Z0-9][a-zA-Z0-9-_]+\\(\\.\\|\\[\\.\\]\\)[a-zA-Z]\\{2,11\\}\\)")
(set-register ?s '";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with <open> and enter text in its buffer.
")

;; erc-colors
(erc-colorize-mode 1)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-c 2") 'helm-do-ag)
(helm-mode 1)

(setq projectile-completion-system 'helm)
(setq projectile-enable-caching t)
(helm-projectile-on)
(setq linum-format "%d ")

(set-face-attribute 'flycheck-warning nil
                    :foreground "black"
                    :background "yellow")
(set-face-attribute 'flycheck-error nil
                    :foreground "black"
                    :background "red")
(set-face-attribute 'flycheck-info nil
                    :foreground "black"
                    :background "green")

(require 'mediawiki)
(setq url-user-agent "FOO")
;;(require 'whitespace)
;;(setq whitespace-style '(face empty tabs lines-tail trailing))
;;(global-whitespace-mode t)
(projectile-global-mode)
(autopair-global-mode 1)

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook 'rainbow-mode)
;; Ensure tramp uses remote path
;; (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

(setq tramp-auto-save-directory "/tmp")

;; Twitter password shenanagans
(setq twittering-use-master-password t)

;; Icicles mode
;; (icy-mode 1)

(require 'recentf)
(setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
(recentf-mode 1)


;; Smartscan mode
(smartscan-mode 1)

;; Ace menu
(ace-popup-menu-mode 1)
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

;; Eshell theme
(eshell-git-prompt-use-theme 'robbyrussell)

;; very good comment

;; Windmove
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; Macro for OS checking
;; https://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp
(defmacro with-system (type &rest body)
  "Evaluate BODY if `system-type' equals TYPE."
  (declare (indent defun))
  `(when (eq system-type ',type)
     ,@body))

;; Enable mouse support
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] (lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] (lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
  )
;; Slack code for highlighted text
;; Todo auto expand the selected reason
(defun sc (b e)
  "adds slack tags for code"
  (interactive "r")
  (save-restriction
    (narrow-to-region b e)
    (save-excursion
      (goto-char (point-min))
        (insert (format "%s\n" "```"))
	(goto-char (point-max))
        (insert (format "\n%s" "```"))
        )))

;; Enable copy and paste
;;(defun copy-from-osx ()
;;  (shell-command-to-string "pbpaste"))
;;
;;(defun paste-to-osx (text &optional push)
;;  (let ((process-connection-type nil))
;;    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
;;      (process-send-string proc text)
;;      (process-send-eof proc))))
;;
;;(setq interprogram-cut-function 'paste-to-osx)
;;(setq interprogram-paste-function 'copy-from-osx)
;;(xclip-mode 1)


;; (require 'exwm)
;; (require 'exwm-config)
;; (exwm-config-default)

(progn
 ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://ergoemacs.org/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face indentation spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (indentation [127789])
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))

;; ANSI term options
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
(eval-after-load "term"
  '(define-key term-raw-map (kbd "C-c C-y") 'term-paste))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)))

;; Shorten yes and no
(defalias 'yes-or-no-p 'y-or-n-p)

;; Spaces, not tabs
(setq tab-width 2
      indent-tabs-mode nil)

;; Misc
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "RET") 'newline-and-indent)

;; Indentation and cleanup
(defun untabify-buffer ()
  (interactive)
  (untabify (point-min) (point-max)))

(defun indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer."
  (interactive)
  (indent-buffer)
  (untabify-buffer)
  (delete-trailing-whitespace))

(defun cleanup-region (beg end)
  "Remove tmux artifacts from region."
  (interactive "r")
  (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
    (replace-regexp re "" nil beg end)))

(global-set-key (kbd "C-x M-t") 'cleanup-region)
(global-set-key (kbd "C-c n") 'cleanup-buffer)

;;(setq-default show-trailing-whitespace t)

;; cnc-command
(defun visible-buffers ()
  "Definition"
  (interactive)
  (mapcar '(lambda (window) (buffer-name (window-buffer window))) (window-list)))

(defun all-buffers-except-this ()
  "Definition"
  (interactive)
  (delete (buffer-name (current-buffer)) (visible-buffers))
  )

(defun cnc-from-file ()
  "A command to run commands on the other open buffers"
  (interactive)
  (dolist (elt (all-buffers-except-this))
    (comint-send-string elt (format "%s\n" (thing-at-point `line))))
  (next-line)
  t
  )

(defun cnc-prompt (cmd)
  "A command to run commands on the other open buffers"
  (interactive "sCmd: ")
  (dolist (elt (visible-buffers))
    (comint-send-string elt (format "%s\n" cmd)))
  )

(global-set-key (kbd "C-c y") `cnc-prompt)
(global-set-key (kbd "C-c C-.") `cnc-from-file)

(setq projectile-mode-line "Projectile")
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; Winner Mode

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I sometimes still use C-x r w <register> to store a window configuration in a register,           ;;
;; and C-x r j <register> (where <register> is a single character) to jump back to it.               ;;
;; While this is a nice way for storing a few window configurations which you want to go             ;;
;; back to after some time, I find winner-mode to be more convenient in a few regards.               ;;
;; (For example, you won't have to bother naming the configurations).                                ;;
;; Just put (winner-mode 1) in your .emacs, bind winner-undo and winner-redo to convenient shortcuts ;;
;; (or use the IMHO awkward C-c <left> and C-c <right> predefined ones)                              ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(winner-mode 1)

;; LaTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)

;; Remote ansi-term
;; Use this for remote so I can specify command line arguments
(defun remote-term (new-buffer-name cmd &rest switches)
  (setq term-ansi-buffer-name (concat "*" new-buffer-name "*"))
  (setq term-ansi-buffer-name (generate-new-buffer-name term-ansi-buffer-name))
  (setq term-ansi-buffer-name (apply 'make-term term-ansi-buffer-name cmd nil switches))
  (set-buffer term-ansi-buffer-name)
  (term-mode)
  (term-char-mode)
;;  (term-set-escape-char ?\C-x)
  (switch-to-buffer term-ansi-buffer-name))

;; Use plink on windows
(with-system windows-nt
  (message "this is a windows system! I know this")
  (require 'tramp)
  (set-default 'tramp-default-method "plink"))

;; Easy window splitting
(defun split-maj-min (number)
(interactive "N")
"Function to split windows into one major window and multiple minor windows"
(split-window-horizontally)
(other-window 1)
(while (> number 1)
  (setq number (+ -1 number))
  (split-window-vertically))
(balance-windows))

(defun split-cnc (number)
(interactive "N")
"Function to split windows into one major window and multiple minor ansi-terms"
(split-window-horizontally)
(other-window 1)
(ansi-term "/bin/bash" "cnc")
(while (> number 1)
  (split-window-vertically)
  (ansi-term "/bin/bash" "cnc")
  (other-window 1)
  (setq number (+ -1 number)))
(ansi-term "/bin/bash" "cnc")
(other-window 1)
(balance-windows))

;; Move backups
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; no vc in tramp
(setq vc-ignore-dir-regexp
      (format "\\(%s\\)\\|\\(%s\\)"
	      vc-ignore-dir-regexp
	      tramp-file-name-regexp))

;; Turn of scrollbars
(scroll-bar-mode -1)

;; Dumb Jump
(global-set-key (kbd "C-c l") 'helm-projectile-switch-to-buffer)

(global-set-key (kbd "C-c <left>") 'dumb-jump-back)
(global-set-key (kbd "C-c <right>") 'dumb-jump-go)
(global-set-key (kbd "C-c <down>") 'dumb-jump-quick-look)
(global-set-key (kbd "C-c c") 'helm-mini)
(global-set-key (kbd "C-2") 'helm-mini)
(global-set-key (kbd "C-x j") 'kill-this-buffer)

(setq helm-mini-default-sources 
      '(helm-source-buffers-list 
        helm-source-bookmarks 
;;        helm-source-recentf 
        helm-source-buffer-not-found))

(add-to-list 'load-path "/path/to/es-mode-dir")
(autoload 'es-mode "es-mode.el"
            "Major mode for editing Elasticsearch queries" t)
(add-to-list 'auto-mode-alist '("\\.es$" . es-mode))
(setq inhibit-startup-message t)

;; w3m
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; optional keyboard short-cut
(global-set-key "\C-xm" 'browse-url-at-point)
(setq w3m-use-cookies t)

;; Gmail
(setq user-mail-address "noonker@pm.me"
      user-full-name "Joshua Person")

(setq gnus-select-method '(nnimap "127.0.0.1"
                                  (nnimap-address "127.0.0.1")
                                  (nnimap-server-port 1143)
				  (nnimap-stream starttls)))


(add-to-list 'gnus-secondary-select-methods
             '(nnimap "work"
                      (nnimap-address "outlook.office365.com")
                      (nnimap-server-port 993)
                      (nnimap-stream ssl)
                      (nnir-search-engine imap)
                      ))

(setq mail-sources '((imap :server "127.0.0.1"
                            :user "noonker@pm.me"
			   )))

(setq tls-program
      '("gnutls-cli --insecure -p %p %h"
      "gnutls-cli --insecure -p %p %h --protocols ssl3"
      "openssl s_client -connect %h:%p -no_ssl2 -ign_eof"))

(gnus-demon-add-handler 'gnus-group-get-new-news 60 nil)

;; Alert with notifications for new mail
(require 'gnus-desktop-notify)
(gnus-desktop-notify-mode)
(gnus-demon-add-scanmail)

;; SMTP settings loving lifted from http://www.mostlymaths.net/2010/12/emacs-30-day-challenge-using-gnus-to.html
;; Now lets configure smtpmail.el with your name and functions to send;; mail using your smtp accounts by changing the from field
(require 'smtpmail)
(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      mail-from-style nil user-full-name "Joshua Person"
      smtpmail-debug-info t smtpmail-debug-verb t)

(defun set-smtp (mech server port user password)
  "Set related SMTP variables for supplied parameters."
  (setq smtpmail-smtp-server server smtpmail-smtp-service port
	smtpmail-auth-credentials (list (list server port user
					      password)) smtpmail-auth-supported (list mech)
					      smtpmail-starttls-credentials nil)
  (message "Setting SMTP server to `%s:%s' for user `%s'."
	   server port user))

(defun set-smtp-ssl (server port user password &optional key
			    cert)
  "Set related SMTP and SSL variables for supplied parameters."
  (setq starttls-use-gnutls t
	starttls-gnutls-program "gnutls-cli"
	starttls-extra-arguments nil smtpmail-smtp-server server
	smtpmail-smtp-service port
	smtpmail-auth-credentials (list (list server port user
					      password)) smtpmail-starttls-credentials (list (list
											      server port key cert)))
  (message
   "Setting SMTP server to `%s:%s' for user `%s'. (SSL
enabled.)" server port user))

(defun change-smtp ()
  "Change the SMTP server according to the current from line."
  (save-excursion
    (loop with from = (save-restriction
			(message-narrow-to-headers)
			(message-fetch-field "from"))
	  for (auth-mech address . auth-spec) in smtp-accounts
	  when (string-match address from) do (cond
					       ((memq auth-mech '(cram-md5 plain login))
						(return (apply 'set-smtp (cons auth-mech auth-spec))))
					       ((eql auth-mech 'ssl)
						(return (apply 'set-smtp-ssl auth-spec)))
					       (t (error "Unrecognized SMTP auth. mechanism:
`%s'." auth-mech))) finally (error "Cannot infer SMTP
information."))))

;; The previous function will complain if you fill the from field with;; an account not present in smtp-accounts.
(defvar %smtpmail-via-smtp (symbol-function 'smtpmail-via-smtp))

(defun smtpmail-via-smtp (recipient smtpmail-text-buffer)
  (with-current-buffer smtpmail-text-buffer
    (change-smtp))
  (funcall (symbol-value '%smtpmail-via-smtp) recipient
	   smtpmail-text-buffer))

(setq mail-user-agent 'gnus-user-agent)

(defun todo (text &optional body) 
  (interactive "sTodo: ")
  (compose-mail-other-window "noonker@pm.me" text)
  (mail-text)
  (if body
      (insert body))
  (message-send-and-exit)
  )

;; ipython fix
(setq python-shell-interpreter "ipython3"
    python-shell-interpreter-args "--simple-prompt -i")

;; Google chrome as default browser
;; (setq browse-url-browser-function 'eww)
(setq browse-url-browser-function 'browse-url-default-browser)

;; Temporarily maximize buffers
(defun toggle-maximize-buffer () "Maximize buffer"
  (interactive)
  (if (= 1 (length (window-list)))
    (jump-to-register '_)
    (progn
      (set-register '_ (list (current-window-configuration)))
      (delete-other-windows))))

;; Bind it to a key.
(global-set-key [(super shift return)] 'toggle-maximize-buffer)

;; Neotree
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; Insert date
(defun insert-current-date () (interactive)
  (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)")))

;; Start hangups
(defun hangups ()
  (interactive)
  (ansi-term "hangups" "hangups"))

;; Start tmux
(defun tmux()
  (interactive)
  (ansi-term "tmux" "tmux"))

;; Start Selenium
(defun selenium()
  (interactive)
  (save-excursion
    (async-shell-command "java -jar $HOME/Documents/selenium.jar")))

;; Start Selenium
(defun mopidy()
  (interactive)
  (save-excursion
    (ansi-term "mopidy" "mopidy")))

;; No menus by default
(tool-bar-mode -1)
(menu-bar-mode -1)

(setq wttrin-default-accept-language '("Accept-Language" . "en-US"))
(setq wttrin-default-cities '("Ann Arbor" "Escanaba"))

(defun passc ()
  "Copy the password of the entry in the current buffer."
  (interactive)
    (helm-find-files-1 "~/.password-store/Internet")
    (goto-char (point-min))
    (copy-region-as-kill (point) (line-end-position))
    (kill-this-buffer))

(defun ruthless-kill ()
  "Kill the line without copying it"
  (interactive)
  (delete-region (point) (line-end-position)))

(global-set-key (kbd "C-c k") 'ruthless-kill)
(global-set-key (kbd "M-S") 'helm-slack)

(setq erc-hide-list '("JOIN" "PART" "QUIT"))

;; load theme
(beacon-mode 1)


;; Company Mode shit
(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0.3)
(setq company-minimum-prefix-length 2)

(defun complete-or-indent ()
  (interactive)
  (if (company-manual-begin)
      (company-complete-common)
    (indent-according-to-mode)))

(defun indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))

(setq helm-exit-idle-delay 0)
(defun dark()
  (interactive)
  (load-theme 'solarized-dark t)
  )

(defun light()
  (interactive)
  (load-theme 'solarized-light t)
  )

(defun monokai()
  (interactive)
  (load-theme 'monokai t)
  )


;;; Big QOL changes.
(setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
(setq slack-buffer-function #'switch-to-buffer)
(setq slack-prefer-current-team t)
(setq slack-display-team-name nil)

(add-hook 'slack-mode-hook #'emojify-mode)
(setq slack-buffer-create-on-notify t)
;; (setq alert-default-style 'mode-line)
(setq alert-default-style 'notifications)

(defun slack-user-status (_id _team) "")
;;; Channels
(setq slack-message-notification-title-format-function
      (lambda (_team room threadp)
        (concat (if threadp "Thread in #%s") room)))

(defun endless/-cleanup-room-name (room-name)
  "Make group-chat names a bit more human-readable."
  (replace-regexp-in-string
   "--" " "
   (replace-regexp-in-string "#mpdm-" "" room-name)))

;;; Private messages and group chats
(setq
 slack-message-im-notification-title-format-function
 (lambda (_team room threadp)
   (concat (if threadp "Thread in %s") 
           (endless/-cleanup-room-name room))))

(defun slk ()
  "start slack"
  (interactive)
  (slack-start)
  (cl-defmethod slack-buffer-name ((_class (subclass slack-room-buffer)) room team)
    (slack-if-let* ((room-name (slack-room-name room team)))
	(format  ":%s"
		 room-name)))
  (slack-change-current-team)
)

(require 'emms-setup)
(require 'emms-streams)
(require 'emms-stream-info)

;; EMMS Streams
(setq emms-stream-default-list
      (append 
       '(("SomaFM: Dubstep" "http://somafm.com/dubstep130.pls" 1 streamlist)
	 ("SomaFM: Goa" "http://somafm.com/suburbsofgoa130.pls" 1 streamlist)
	 ("SomaDM: The Trip" "http://somafm.com/thetrip130.pls" 1 streamlist)
	 ("SomaDM: Boot Liquor" "http://somafm.com/bootliquor130.pls" 1 streamlist)
	 ("SomaDM: Digitails" "http://somafm.com/digitalis130.pls" 1 streamlist)
	 ("SomaDM: Space" "http://somafm.com/spacestation130.pls" 1 streamlist)
	 ("SomaDM: Bagel" "http://somafm.com/bagel130.pls" 1 streamlist)
	 ("SomaDM: Soul" "http://somafm.com/7soul130.pls" 1 streamlist)
	 ("SomaDM: Folk" "http://somafm.com/folkfwd130.pls" 1 streamlist)
	 ("SomaDM: IDM" "http://somafm.com/cliqhop130.pls" 1 streamlist)
	 ("SomaDM: Lush" "http://somafm.com/lush130.pls" 1 streamlist)
	 ("SomaDM: SF1033" "http://somafm.com/sf1033130.pls" 1 streamlist)
	 ("SomaDM: DS1" "http://somafm.com/deepspaceone130.pls" 1 streamlist)
	 ("SomaDM: Jazz" "http://somafm.com/sonicuniverse130.pls" 1 streamlist))
       emms-stream-default-list))

 (setq emms-directory "~/org/emms"
	emms-stream-default-action "play"
	emms-stream-info-backend 'mplayer
	emms-stream-bookmarks-file "~/org/emms/streams"
	emms-mode-line-format " 𝄞 " )

(require 'emms-mode-line-icon)

;; (emms-mode-line-cycle 1)

 (emms-minimalistic)
 (emms-default-players)
 (emms-mode-line-enable)

 (advice-add 'emms-stream-info-mplayer-backend
	      :override
	      (lambda (url)
		"The original function isn't working, using this temporarily until I figure it out."
		(condition-case excep
		    (call-process "mplayer" nil t nil
				  "-msglevel" "decaudio=-1:cache=-1:statusline=-1:cplayer=-1" "-cache" "180"
				  "-endpos" "0" "-vo" "null" "-ao" "null" "-playlist"
				  url)
		  (file-error
		   (error "Could not find the mplayer backend binary")))))

(require 'elfeed)
(defun elfeed-mail-todo (&optional use-generic-p)
  "Mail this to myself for later reading"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-title entry)
             do (todo it (elfeed-entry-link entry)))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(define-key elfeed-search-mode-map (kbd "m") 'elfeed-mail-todo)


(setq org-jira-jira-status-to-org-keyword-alist
       '(("IN PROGRESS" . "INPROGRESS")
         ("TO DO" . "TODO")
         ("DONE" . "DONE")))


(load-theme 'sanityinc-tomorrow-eighties t)
